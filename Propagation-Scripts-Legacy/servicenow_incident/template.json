{
  "version": 1,
  "template": {
    "command": "[CmdletBinding()]\nparam (\n    [Parameter(Mandatory)]\n    [string]$ServiceNowInstance,\n\n    [Parameter(Mandatory)]\n    [string]$OAuthClientId,\n\n    [Parameter(Mandatory)]\n    [securestring]$OAuthClientSecret,\n\n    [Parameter(Mandatory)]\n    [string]$ServiceNowUsername,\n\n    [Parameter(Mandatory)]\n    [securestring]$ServiceNowUserPassword,\n\n    [Parameter(Mandatory)]\n    [string]$UserName,\n\n    [Parameter()]\n    [ValidatePattern('^(INC\\d{7})?$')]\n    [string]$IncidentNumber,\n\n    [Parameter()]\n    [string]$Description,\n\n    [Parameter()]\n    [string]$WorkNotes,\n\n    [Parameter()]\n    [ValidateRange(0,7)]\n    [int]$State,\n\n    ## This is only a placeholder for AnyID and is not used\n    [Parameter()]\n    [securestring]$NewPassword\n)\n\nWrite-Output -InputObject \"Running script with parameters: $($PSBoundParameters | Out-String) as [$(whoami)]...\"\n\n$ErrorActionPreference = 'Stop'\n\n# Function to obtain an access token from ServiceNow\nfunction Get-ServiceNowAccessToken {\n    [CmdletBinding()]\n    param(\n        # The refresh token to use for obtaining a new access token (optional)\n        [Parameter()]\n        [ValidateNotNullOrEmpty()]\n        [string]$RefreshToken\n    )\n\n    $apiUrl = \"https://$ServiceNowInstance.service-now.com/oauth_token.do\"\n\n    $plainTextClientSecret = (New-Object PSCredential \"user\", $OAuthClientSecret).GetNetworkCredential().Password\n\n    $params = @{\n        Uri                = $apiUrl\n        SkipHttpErrorCheck = $true\n        Method             = 'POST'\n        StatusCodeVariable = 'StatusCode'\n        Body               = @{\n            grant_type    = \"password\"\n            client_id     = $OAuthClientId\n            client_secret = $plainTextClientSecret\n        }\n    }\n\n    if ($PSBoundParameters.ContainsKey('RefreshToken')) {\n        $params.Body.grant_type = 'refresh_token'\n        $params.Body.refresh_token = $RefreshToken\n    } else {\n        $params.Body.grant_type = 'password'\n        $params.Body.username = $ServiceNowUsername\n        $params.Body.password = (New-Object PSCredential \"user\", $ServiceNowUserPassword).GetNetworkCredential().Password\n    }\n\n    $response = Invoke-RestMethod @params\n    if ($StatusCode -ne 200) {\n        throw \"Failed to generate access token. Error: $($response.error_description)\"\n    }\n\n    $response\n}\n\n# Function to make API calls to ServiceNow\nfunction Invoke-ServiceNowApi {\n    [CmdletBinding()]\n    param (\n        # The endpoint to call\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$Endpoint,\n\n        # The HTTP method to use (optional, defaults to GET)\n        [ValidateSet('GET', 'POST', 'PATCH')]\n        [string]$Method = 'GET',\n\n        # The body to send with the request (optional)\n        [Parameter()]\n        [object]$Body\n    )\n\n    $uri = \"https://$ServiceNowInstance.service-now.com/api/now/$Endpoint\"\n    $headers = @{\n        'Authorization' = \"Bearer $script:accessToken\"\n    }\n\n    $params = @{\n        Uri                = $uri\n        Method             = $Method\n        Headers            = $headers\n        SkipHttpErrorCheck = $true\n        StatusCodeVariable = 'StatusCode'\n        ContentType        = 'application/json'\n    }\n    if ($Body) {\n        $params['Body'] = ($Body | ConvertTo-Json)\n    }\n\n    $response = Invoke-RestMethod @params\n    if ($StatusCode -notin 200, 201) {\n        throw \"API call failed with status code: $StatusCode, $($response.error.message) -- $($response.error.detail)\"\n    }\n    $response\n}\n \n# Function to retrieve a specific incident from ServiceNow\nfunction Get-ServiceNowIncident {\n    [CmdletBinding()]\n    param (\n        # The incident number to retrieve\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$IncidentNumber\n    )\n\n    # Construct the query to find the incident by number\n    $query = \"number=$IncidentNumber\"\n    $endpoint = \"table/incident?sysparm_query=$query&sysparm_limit=1\"\n    \n    $incident = Invoke-ServiceNowApi -Endpoint $endpoint -Method 'GET'\n        \n    if ($incident.result.Count -gt 0) {\n        $incident.result[0]\n    }\n}\n\n# Function to update an existing incident in ServiceNow\nfunction Update-ServiceNowIncident {\n    [CmdletBinding()]\n    param (\n        # The ID of the incident to update\n        [Parameter(Mandatory)]\n        [string]$IncidentId,\n\n        # The fields to update\n        [Parameter(Mandatory)]\n        [hashtable]$Fields\n    )\n\n    Invoke-ServiceNowApi -Endpoint \"table/incident/$IncidentId\" -Method 'PATCH' -Body $Fields\n}\n\n# Function to create a new incident in ServiceNow\nfunction New-ServiceNowIncident {\n    [CmdletBinding()]\n    param (\n        # The fields for the new incident\n        [Parameter(Mandatory)]\n        [hashtable]$Fields\n    )\n\n    Invoke-ServiceNowApi -Endpoint \"table/incident\" -Method 'POST' -Body $Fields\n}\n\n# Get the access token\n$script:accessToken = (Get-ServiceNowAccessToken).access_token\n\n# Prepare the fields for creating or updating an incident\n$fields = @{\n    short_description = \"The username [$UserName]'s password has changed.\"\n    description       = $Description\n    work_notes        = $WorkNotes\n}\n\n## Not validated in the parameter because AnyID always passes a value of 0 if not provided in the AnyId prop script\nif ($State -gt 0) {\n    $fields.state = $State\n}\n\n# Remove any null values from the fields hashtable\n$populatedFields = @{}\n$fields.GetEnumerator() | Where-Object { $_.Value } | ForEach-Object { $populatedFields[$_.Key] = $_.Value }\n\n# Ensure at least one field is provided\nif ($populatedFields.Count -eq 0) {\n    throw \"No fields provided to create/update an incident.\"\n}\n\n# Update existing incident if provided, otherwise create a new one\nif ($IncidentNumber) {\n    $existingIncident = Get-ServiceNowIncident -IncidentNumber $IncidentNumber\n\n    if ($existingIncident) {\n        $null = Update-ServiceNowIncident -IncidentId $existingIncident.sys_id -Fields $populatedFields\n    } else {\n        throw \"Incident $IncidentNumber not found\"\n    }\n} else {\n    $null = New-ServiceNowIncident -Fields $populatedFields\n}\n\n# Indicate success\n$true",
    "configurationProperties": [
      {
        "id": "5a4ad551-cea5-4029-912f-8fe9749c6b94",
        "isMandatory": true,
        "name": "ServiceNowInstance"
      },
      {
        "id": "af7f879a-d40e-48f4-b4cd-c23f982f9e04",
        "isMandatory": true,
        "name": "OAuthClientId"
      },
      {
        "id": "1b306b4c-319a-483a-a246-910f5b226a88",
        "isMandatory": true,
        "name": "OAuthClientSecret",
        "type": 5
      },
      {
        "id": "d9c76877-71f4-4ccb-ac0a-29858c2105d6",
        "isMandatory": true,
        "name": "ServiceNowUserName"
      },
      {
        "id": "828ea3ce-6b50-4bd2-ac99-3fb6f19ff8d3",
        "isMandatory": true,
        "name": "ServiceNowUserPassword",
        "type": 5
      }
    ],
    "description": "Creates or updates ServiceNow incidents",
    "executionProperties": [
      {
        "id": "690dd502-957c-4e06-a66a-5e06c4d1a41c",
        "isMandatory": true,
        "name": "UserName",
        "type": 8
      },
      {
        "id": "fcd314b0-37f1-4273-912e-9062642734cb",
        "name": "Description"
      },
      {
        "id": "bec60fa7-5b64-41f9-a8c3-3038c6428a6b",
        "name": "IncidentNumber"
      },
      {
        "id": "efe435b8-7106-4d07-9a9a-f213ebf765c7",
        "name": "WorkNotes"
      },
      {
        "id": "1cdc5cac-81fc-42ea-954b-d3e6e88da332",
        "name": "State",
        "type": 1
      }
    ],
    "id": "40a15aeb-79b1-41b8-b5f3-dd37aea3f24a",
    "imageName": "SampleNotificationRed",
    "name": "ServiceNow Incident"
  }
}