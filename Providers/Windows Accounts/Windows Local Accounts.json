{
  "version": 2,
  "template": {
    "accountProperties": [
      {
        "id": "c24049c5-9ec4-4f26-832c-86f283067c73",
        "isMandatory": true,
        "name": "Username",
        "type": 4
      },
      {
        "id": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
        "isMandatory": true,
        "name": "Password",
        "type": 3
      },
      {
        "id": "0294dfac-43c0-4dfb-8fc3-d9e7170e7bda",
        "isMandatory": true,
        "name": "Hostname"
      },
      {
        "id": "54b6d680-0b89-4ce6-a512-bc98e0008fd7",
        "isMandatory": true,
        "name": "Hostname/SID",
        "type": 6
      },
      {
        "id": "832e2e28-673a-4fe2-884f-ea2ec8930b30",
        "isMandatory": true,
        "name": "SID"
      },
      {
        "id": "b009b031-0500-4579-ba50-112cb9aef41c",
        "name": "Description"
      }
    ],
    "commands": {
      "accountDiscovery": {
        "command": "[CmdletBinding()]\nParam (\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[String]$Hosts,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[String]$LoginUsername,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[SecureString]$LoginPassword,\n\t[Parameter(Mandatory = $False)]\n\t[Boolean]$ExcludeDisabledAccountsInDiscovery,\n\t[Parameter(Mandatory = $False)]\n\t[String]$HostsLDAPSearchFilter,\n\t[Switch]$DebugOutput\n)\n\n[System.Management.Automation.ScriptBlock]$RemoteHostScript = {\n\tParam ($Hostname,\n\t\t$ExcludeDisabled)\n\t\n\tFunction Get-LocalUserADSI\n\t{\n\t\t\n\t\tBegin\n\t\t{\n\t\t\t\n\t\t\t#region  Helper Functions\n\t\t\t\n\t\t\tFunction ConvertTo-SID\n\t\t\t{\n\t\t\t\t\n\t\t\t\tParam ([byte[]]$BinarySID)\n\t\t\t\t\n\t\t\t\t(New-Object  System.Security.Principal.SecurityIdentifier($BinarySID, 0)).Value\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tFunction Convert-UserFlag\n\t\t\t{\n\t\t\t\t\n\t\t\t\tParam ($UserFlag)\n\t\t\t\t\n\t\t\t\t$List = New-Object  System.Collections.ArrayList\n\t\t\t\t\n\t\t\t\tSwitch ($UserFlag)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0001) { [void]$List.Add('SCRIPT') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0002) { [void]$List.Add('ACCOUNTDISABLE') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0008) { [void]$List.Add('HOMEDIR_REQUIRED') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0010) { [void]$List.Add('LOCKOUT') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0020) { [void]$List.Add('PASSWD_NOTREQD') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0040) { [void]$List.Add('PASSWD_CANT_CHANGE') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0080) { [void]$List.Add('ENCRYPTED_TEXT_PWD_ALLOWED') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0100) { [void]$List.Add('TEMP_DUPLICATE_ACCOUNT') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0200) { [void]$List.Add('NORMAL_ACCOUNT') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x0800) { [void]$List.Add('INTERDOMAIN_TRUST_ACCOUNT') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x1000) { [void]$List.Add('WORKSTATION_TRUST_ACCOUNT') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x2000) { [void]$List.Add('SERVER_TRUST_ACCOUNT') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x10000) { [void]$List.Add('DONT_EXPIRE_PASSWORD') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x20000) { [void]$List.Add('MNS_LOGON_ACCOUNT') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x40000) { [void]$List.Add('SMARTCARD_REQUIRED') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x80000) { [void]$List.Add('TRUSTED_FOR_DELEGATION') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x100000) { [void]$List.Add('NOT_DELEGATED') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x200000) { [void]$List.Add('USE_DES_KEY_ONLY') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x400000) { [void]$List.Add('DONT_REQ_PREAUTH') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x800000) { [void]$List.Add('PASSWORD_EXPIRED') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x1000000) { [void]$List.Add('TRUSTED_TO_AUTH_FOR_DELEGATION') }\n\t\t\t\t\t\n\t\t\t\t\t($UserFlag -BOR 0x04000000) { [void]$List.Add('PARTIAL_SECRETS_ACCOUNT') }\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$List -join ', '\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t#endregion  Helper Functions\n\t\t\t\n\t\t}\n\t\t\n\t\tProcess\n\t\t{\n\t\t\t$adsi = [ADSI]\"WinNT://$env:COMPUTERNAME\"\n\t\t\t\n\t\t\t$adsi.Children | where { $_.SchemaClassName -eq 'user' } | ForEach {\n\t\t\t\t\n\t\t\t\t[pscustomobject]@{\n\t\t\t\t\t\n\t\t\t\t\tName = $_.Name[0]\n\t\t\t\t\tDescription = $_.Description[0]\n\t\t\t\t\tSID\t     = ConvertTo-SID -BinarySID $_.ObjectSID[0]\n\t\t\t\t\tUserFlags = Convert-UserFlag -UserFlag $_.UserFlags[0]\n\t\t\t\t\t#PasswordAge = [math]::Round($_.PasswordAge[0]/86400)\n\t\t\t\t\t#LastLogin = If ($_.LastLogin[0] -is [datetime]) { $_.LastLogin[0] }Else{ 'Never logged  on' }\n\t\t\t\t\t#MinPasswordLength = $_.MinPasswordLength[0]\n\t\t\t\t\t#MinPasswordAge = [math]::Round($_.MinPasswordAge[0]/86400)\n\t\t\t\t\t#MaxPasswordAge = [math]::Round($_.MaxPasswordAge[0]/86400)\n\t\t\t\t\t#BadPasswordAttempts = $_.BadPasswordAttempts[0]\n\t\t\t\t\t#MaxBadPasswords = $_.MaxBadPasswordsAllowed[0]\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tTry\n\t{\n\t\t\n\t\tIf ($ExcludeDisabled)\n\t\t{\n\t\t\t$LocalAccounts = Get-LocalUserADSI | Where-Object { $_.UserFlags -notmatch 'ACCOUNTDISABLE' } -ErrorAction 'Stop'\n\t\t}\n\t\tElse\n\t\t{\n\t\t\t$LocalAccounts = Get-LocalUserADSI -ErrorAction 'Stop'\n\t\t}\n\t\t\n\t\t$Accounts = $LocalAccounts | ForEach-Object {\n\t\t\t[PSCustomObject]@{\n\t\t\t\t'Username' = $_.Name\n\t\t\t\t'Password' = \"password\"\n\t\t\t\t'HostName' = $Hostname\n\t\t\t\t'Hostname/SID' = $Hostname + \"/\" + $_.SId\n\t\t\t\t'SID'\t   = $_.SId\n\t\t\t\t'Description' = $_.Description\n\t\t\t}\n\t\t}\n\t\tWrite-Output $Accounts\n\t}\n\tCatch\n\t{\n\t\tWrite-Error \"LocalAccount failed to be retrieved on host $Hostname\"\n\t}\n\t\n}\n\nfunction Get-WinRMNetworkParameters\n{\n\tparam (\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t[String]$HostName)\n\t\n\tImport-Module NetTCPIP\n\tswitch ($HostName)\n\t{\n\t\t({ (Resolve-DnsName -Name $_ -ErrorAction SilentlyContinue).IPAddress })\n\t\t{\n\t\t\t$SessionParameters = @{\n\t\t\t\tComputerName = $Hostname\n\t\t\t}\n\t\t\t\n\t\t\tswitch ($_)\n\t\t\t{\n\t\t\t\t({\n\t\t\t\t\t\t#check if host supports SSL Port\n\t\t\t\t\t\t[System.Net.Sockets.TcpClient]::new().ConnectAsync($_, 5986).Wait(100)\n\t\t\t\t\t})\n\t\t\t\t{\n\t\t\t\t\t$SessionParameters.Add(\"Port\", 5986)\n\t\t\t\t\t$SessionParameters.Add(\"UseSSL\", $True)\n\t\t\t\t\tTry\n\t\t\t\t\t{\n\t\t\t\t\t\t$result = Test-WSMan @SessionParameters\n\t\t\t\t\t}\n\t\t\t\t\tCatch\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite-EventLog -LogName Devolutions -EntryType Warning -Source \"DVLS\" -EventId 1 -Message $Error[0].Exception.ToString()\n\t\t\t\t\t\t#Write-Error $Error[0].Exception.ToString()\n\t\t\t\t\t\treturn $null\n\t\t\t\t\t}\n\t\t\t\t\treturn $SessionParameters\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t({\n\t\t\t\t\t\t#check if host supports non SSL Port\n\t\t\t\t\t\t[System.Net.Sockets.TcpClient]::new().ConnectAsync($_, 5985).Wait(100)\n\t\t\t\t\t})\n\t\t\t\t{\n\t\t\t\t\t$SessionParameters.Add(\"Port\", 5985)\n\t\t\t\t\tTry\n\t\t\t\t\t{\n\t\t\t\t\t\t$result = Test-WSMan @SessionParameters\n\t\t\t\t\t}\n\t\t\t\t\tCatch\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite-EventLog -LogName Devolutions -EntryType Warning -Source \"DVLS\" -EventId 1 -Message $Error[0].Exception.ToString()\n\t\t\t\t\t\t#Write-Error $Error[0].Exception.ToString()\n\t\t\t\t\t\treturn $null\n\t\t\t\t\t}\n\t\t\t\t\treturn $SessionParameters\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdefault\n\t\t\t\t{\n\t\t\t\t\tWrite-EventLog -LogName Devolutions -EntryType Warning -Source \"DVLS\" -EventId 1 -Message \"No connectivity on TCP ports 5985 or 5986 to $Hostname\"\n\t\t\t\t\t#Write-Information \"No connectivity on TCP ports 5985 or 5986 to $Hostname\"\n\t\t\t\t\treturn $null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Get-WinRMSession\n{\n\tparam (\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t$WinRMNetworkParameters,\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t[System.Management.Automation.PSCredential]$Credential\n\t)\n\t\n\t$WinRMNetworkParameters.Add(\"ErrorAction\", \"Stop\")\n\tTry\n\t{\n\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t}\n\tCatch\n\t{\n\t\t$WinRMNetworkParameters.Add(\"Credential\", $Credential)\n\t\tTry\n\t\t{\n\t\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t\t}\n\t\tCatch\n\t\t{\n\t\t\t$DNSsuffix = $hostname.SubString($hostname.IndexOf(\".\") + 1)\n\t\t\t$NewUsername = $Credential.UserName + \"@\" + $DNSsuffix\n\t\t\t$NewCredential = New-Object System.Management.Automation.PSCredential @($NewUsername, $Credential.Password)\n\t\t\t$WinRMNetworkParameters.Credential = $NewCredential\n\t\t\tTry\n\t\t\t{\n\t\t\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t\t\t}\n\t\t\tCatch\n\t\t\t{\n\t\t\t\tWrite-EventLog -LogName Devolutions -EntryType Warning -Source \"DVLS\" -EventId 1 -Message $Error[0].Exception.ToString()\n\t\t\t\t#Write-Error $Error[0].Exception.ToString()\n\t\t\t}\n\t\t}\n\t}\n\tIf ($RemoteSession.State -eq 'Opened')\n\t{\n\t\tWrite-EventLog -LogName Devolutions -EntryType Information -Source \"DVLS\" -EventId 1 -Message $(\"Powershell remoting session to \" +$WinRMNetworkParameters.ComputerName + \"created successfully\")\n\t\treturn $RemoteSession\n\t}\n}\n\n$Credential = New-Object System.Management.Automation.PSCredential @($LoginUsername, $LoginPassword)\n$HostsArray = $Hosts -split \"[ ,;]\"\n\nSet-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force\nImport-Module NetTCPIP\n\n#If a single host is specified and that host is also listening on port 636 it is likely a domain controller, in which case enumerating local accounts would be redundant\n#So instead enumerate active domain computers for the list of hosts to query for local accounts\nIf (($HostsArray.Count -eq 1) -and ([System.Net.Sockets.TcpClient]::new().ConnectAsync($HostsArray[0], 636).Wait(100)))\n{\n\t$DomainFQDN = $HostsArray[0]\n\t$Credential = New-Object System.Management.Automation.PSCredential @(\"$LoginUsername@$DomainFQDN\", $LoginPassword)\n\t\n\tTry\n\t{\n\t\t$ADSI = New-Object System.DirectoryServices.DirectoryEntry(\"LDAP://$DomainFQDN`:636\", $Credential.UserName, $Credential.GetNetworkCredential().Password) -ErrorAction Stop\n\t\t[void]$ADSI.ToString()\n\t}\n\tCatch\n\t{\n\t\tWrite-EventLog -LogName Devolutions -EntryType Warning -Source \"DVLS\" -EventId 1 -Message $Error[0].Exception.ToString()\n\t\tWrite-Error $error[0].Exception.ToString()\n\t}\n\t\n\tIf ($ADSI.distinguishedName -ne \"\")\n\t{\n\t\t$Searcher = New-Object -TypeName System.DirectoryServices.DirectorySearcher($ADSI)\n\t\t$Searcher.Filter = \"(&(objectclass=computer)\" #Find only computer objects\n\t\t$Searcher.Filter += \"(!useraccountcontrol:1.2.840.113556.1.4.804:=2)\" #Exclude disable accounts\n\t\t$Searcher.Filter += \"(!userAccountControl:1.2.840.113556.1.4.803:=8192)\" #Exclude domain controllers\n\t\t$Searcher.Filter += \"(!serviceprincipalname=*MSClusterVirtualServer*)\" #Exclude MS Clustering objects\n\t\t$Searcher.Filter += \"(!operatingSystem=Windows Server 2008*)\" #Exclude legacy 2008 Operating system that does not support powershell remoting\n\t\t\n\t\tIf ($HostsLDAPSearchFilter)\n\t\t{\n\t\t\t$Searcher.Filter += $HostsLDAPSearchFilter #Append any additional search filter from provider definition\n\t\t}\n\t\t$Searcher.Filter += \")\"\n\t\t\n\t\t$DomainComputers = @()\n\t\t$DomainComputers = $Searcher.FindAll()\n\t\tIf ($DomainComputers.Count -gt 0)\n\t\t{\n\t\t\tIf ($HostsArray) { $HostsArray.Clear() }\n\t\t\t$HostsArray = @()\n\t\t\tforeach ($Computer in $DomainComputers)\n\t\t\t{\n\t\t\t\t$HostsArray += $Computer.Properties['dnshostname']\t\n\t\t\t}\n\t\t}\n\t}\n}\n\n$HostAccounts = $HostsArray | ForEach-Object {\n\t$Hostname = $_.Trim();\n\t\n\t$WinRMNetworkParameters = Get-WinRMNetworkParameters -HostName $Hostname\n\tIf ($WinRMNetworkParameters.Port)\n\t{\n\t\t$PSSession = Get-WinRMSession -WinRMNetworkParameters $WinRMNetworkParameters -Credential $Credential\n\t\tIf ($PSSession)\n\t\t{\n\t\t\tTry\n\t\t\t{\n\t\t\t\t$Results = $null\n\t\t\t\t$Results = Invoke-Command -Session $PSSession -ArgumentList @($Hostname, $ExcludeDisabledAccountsInDiscovery) -ScriptBlock $RemoteHostScript\n\t\t\t}\n\t\t\tCatch\n\t\t\t{\n\t\t\t\tWrite-EventLog -LogName Devolutions -EntryType Warning -Source \"DVLS\" -EventId 1 -Message $Error[0].Exception.ToString()\n\t\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t\t}\n\t\t\t\n\t\t\tRemove-PSSession -Session $PSSession\n\t\t\t$PSSession = $null\n\t\t\tif ($Results -ne $null -and $Results -ne \"\")\n\t\t\t{\n\t\t\t\t#Exclude Local Administrator account if managed by LAPS\n\t\t\t\tforeach ($account in $Results)\n\t\t\t\t{\n\t\t\t\t\tIf (($account.UserName -eq \"Administrator\") -and (($domaincomputers | where {\n\t\t\t\t\t\t\t\t\t$_.Properties.dnshostname -eq $account.HostName\n\t\t\t\t\t\t\t\t}).Properties.\"mslaps-passwordexpirationtime\" -ne $null))\n\t\t\t\t\t{\n\t\t\t\t\t\t$Results = $Results | where { $_.Username -ne $account.UserName }\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t#Exclude Failover Cluster Local Identity\n\t\t\t\t\tIf ($account.UserName -eq \"CLIUSR\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$Results = $Results | where { $_.Username -ne $account.UserName }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $Results\n\t\t\t}\n\t\t}\n\t}\n}\nreturn $HostAccounts\n\n",
        "commandType": 2,
        "id": "84a02e47-c8a3-4be1-973d-3dbfe22a5bb0",
        "isActive": true,
        "parameters": [
          {
            "name": "Hosts",
            "propertyId": "26bd85da-c7ed-447a-ae92-cfd21ebd4bdc"
          },
          {
            "name": "LoginUsername",
            "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73"
          },
          {
            "name": "LoginPassword",
            "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b"
          },
          {
            "name": "ExcludeDisabledAccountsInDiscovery",
            "propertyId": "e13fac46-afc4-40ee-bad3-9550674cbccf"
          },
          {
            "name": "HostsLDAPSearchFilter",
            "propertyId": "0653b613-ea47-4b3c-991f-3766fb996179"
          }
        ]
      },
      "resetPassword": {
        "command": "[CmdletBinding()]\nParam (\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[String]$HostName,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[String]$UserName,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[SecureString]$NewPassword,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[String]$LoginUsername,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[SecureString]$LoginPassword,\n\t[Switch]$DebugOutput\n)\n\n[System.Management.Automation.ScriptBlock]$RemoteHostScript = {\n\tParam ($UserNameParam,\n\t\t$NewPasswordParam)\n\tIf ($DebugOutput)\n\t{\n\t\tWrite-Verbose (\"[Debug] Retrieving Local User, '{0}'\" -F $UserNameParam) -Verbose:$True\n\t}\n\t\n\t# Microsoft.PowerShell.LocalAccounts module not available in 32-bit PowerShell on 64-bit systems.\n\n\t$User = [ADSI] \"WinNT://./$UserNameParam\"\n\tIf (-not ($?))\n\t{\n\t\tWrite-Error \"Username Does Not Exist\"\n\t\tExit\n\t}\n\t\n\tIf ($User)\n\t{\n\t\tIf ($DebugOutput)\n\t\t{\n\t\t\tWrite-Verbose (\"[Debug] User, '{0}' has the status of '{1}' and description of, '{2}'\" -F $User.Name, $User.Enabled, $User.Description) -Verbose:$True\n\t\t}\n\t\t\n\t\tTry\n\t\t{\n\t\t\tIf ($DebugOutput)\n\t\t\t{\n\t\t\t\tWrite-Verbose (\"[Debug] Attempting Password Change of, '{0}'\" -F $User.Name) -Verbose:$True\n\t\t\t}\n\t\t\t$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($NewPasswordParam)\n\t\t\t$UnsecurePassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)\n\t\t\t$User.SetPassword($UnsecurePassword)\n\t\t}\n\t\tCatch\n\t\t{\n\t\t\tWrite-Error (\"Failed To Set Password: {0}\" -F $Error[0].Exception.ToString())\n\t\t\tExit\n\t\t}\n\t\t\n\t\tWrite-Output \"Success\"\n\t}\n\tElse\n\t{\n\t\tWrite-Error \"Unknown User Error\"\n\t}\n}\n\n\nfunction Get-WinRMNetworkParameters\n{\n\tparam (\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t[String]$HostName)\n\t\n\tswitch ($HostName)\n\t{\n\t\t({ (Resolve-DnsName -Name $_ -ErrorAction SilentlyContinue).IPAddress })\n\t\t{\n\t\t\t$SessionParameters = @{\n\t\t\t\tComputerName = $Hostname\n\t\t\t}\n\t\t\t\n\t\t\tswitch ($_)\n\t\t\t{\n\t\t\t\t({\n\t\t\t\t\t\t#check if host supports SSL Port\n\t\t\t\t\t\t[System.Net.Sockets.TcpClient]::new().ConnectAsync($_, 5986).Wait(100)\n\t\t\t\t\t})\n\t\t\t\t{\n\t\t\t\t\t$SessionParameters.Add(\"Port\", 5986)\n\t\t\t\t\t$SessionParameters.Add(\"UseSSL\", $True)\n\t\t\t\t\tTry\n\t\t\t\t\t{\n\t\t\t\t\t\t$result = Test-WSMan @SessionParameters\n\t\t\t\t\t}\n\t\t\t\t\tCatch\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn $SessionParameters\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t({\n\t\t\t\t\t\t#check if host supports non SSL Port\n\t\t\t\t\t\t[System.Net.Sockets.TcpClient]::new().ConnectAsync($_, 5985).Wait(100)\n\t\t\t\t\t})\n\t\t\t\t{\n\t\t\t\t\t$SessionParameters.Add(\"Port\", 5985)\n\t\t\t\t\tTry\n\t\t\t\t\t{\n\t\t\t\t\t\t$result = Test-WSMan @SessionParameters\n\t\t\t\t\t}\n\t\t\t\t\tCatch\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn $SessionParameters\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdefault\n\t\t\t\t{\n\t\t\t\t\tWrite-Error \"No connectivity on TCP ports 5985 or 5986 to $Hostname\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Get-WinRMSession\n{\n\tparam (\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t$WinRMNetworkParameters,\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t[System.Management.Automation.PSCredential]$Credential\n\t)\n\t\n\t$WinRMNetworkParameters.Add(\"ErrorAction\", \"Stop\")\n\tTry\n\t{\n\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t}\n\tCatch\n\t{\n\t\t$WinRMNetworkParameters.Add(\"Credential\", $Credential)\n\t\tTry\n\t\t{\n\t\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t\t}\n\t\tCatch\n\t\t{\n\t\t\t$DNSsuffix = $hostname.SubString($hostname.IndexOf(\".\") + 1)\n\t\t\t$NewUsername = $Credential.UserName + \"@\" + $DNSsuffix\n\t\t\t$NewCredential = New-Object System.Management.Automation.PSCredential @($NewUsername, $Credential.Password)\n\t\t\t$WinRMNetworkParameters.Credential = $NewCredential\n\t\t\tTry\n\t\t\t{\n\t\t\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t\t\t}\n\t\t\tCatch\n\t\t\t{\n\t\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t\t}\n\t\t}\n\t}\n\tIf ($RemoteSession.State -eq 'Opened')\n\t{\n\t\treturn $RemoteSession\n\t}\n}\n\n\n\n\n$WinRMNetworkParameters = Get-WinRMNetworkParameters -HostName $Hostname\nIf ($WinRMNetworkParameters.Port)\n{\n\t$Credential = New-Object System.Management.Automation.PSCredential @($LoginUsername, $LoginPassword)\n\t$PSSession = Get-WinRMSession -WinRMNetworkParameters $WinRMNetworkParameters -Credential $Credential\n\tIf ($PSSession)\n\t{\n\t\tTry\n\t\t{\n\t\t\t$Results = Invoke-Command -Session $PSSession -ArgumentList @($UserName, $NewPassword) -ScriptBlock $RemoteHostScript\n\t\t}\n\t\tCatch\n\t\t{\n\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t}\n\t\t\n\t\tRemove-PSSession -Session $PSSession\n\t\t$PSSession = $null\n\t\tIf ($Results -EQ \"Success\")\n\t\t{\n\t\t\tWrite-Output \"Success\"\n\t\t}\n\t}\n}\n\n",
        "id": "02ea267d-1104-435b-b019-5208cc95c45d",
        "isActive": true,
        "parameters": [
          {
            "name": "HostName",
            "propertyId": "0294dfac-43c0-4dfb-8fc3-d9e7170e7bda",
            "source": 1
          },
          {
            "name": "UserName",
            "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73",
            "source": 1
          },
          {
            "name": "LoginUsername",
            "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73"
          },
          {
            "name": "LoginPassword",
            "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b"
          }
        ]
      },
      "heartbeat": {
        "command": "[CmdletBinding()]\nparam (\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[String]$Username,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[SecureString]$Password,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[String]$Hostname,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[String]$LoginUsername,\n\t[Parameter(Mandatory = $True)]\n\t[ValidateNotNullOrEmpty()]\n\t[SecureString]$LoginPassword\n)\n\n[System.Management.Automation.ScriptBlock]$RemoteHostScript = {\n\tparam (\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t[String]$Username,\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t[SecureString]$Password\n\t)\n\tAdd-Type -AssemblyName System.DirectoryServices.AccountManagement\n\t#$obj = New-Object System.DirectoryServices.AccountManagement.PrincipalContext('machine',$Hostname)\n\t$ct = [System.DirectoryServices.AccountManagement.ContextType]::Machine, $env:computername\n\t$opt = [System.DirectoryServices.AccountManagement.ContextOptions]::SimpleBind\n\t$obj = New-Object System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList $ct\n\t$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($Password)\n\t$UnsecurePassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)\n\t\n\t$result = $obj.ValidateCredentials($Username, $UnsecurePassword)\n\tif ($result -ne $true)\n\t{\n\t\tWrite-Error \"The username or password does not match the credential on the machine\";\n\t}\n\t\n\tWrite-Output $result\n}\n\nfunction Get-WinRMNetworkParameters\n{\n\tparam (\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t[String]$HostName)\n\t\n\tswitch ($HostName)\n\t{\n\t\t({ (Resolve-DnsName -Name $_ -ErrorAction SilentlyContinue).IPAddress })\n\t\t{\n\t\t\t$SessionParameters = @{\n\t\t\t\tComputerName = $Hostname\n\t\t\t}\n\n\t\t\tswitch ($_)\n\t\t\t{\n\t\t\t\t({\n\t\t\t\t\t\t#check if host supports SSL Port\n\t\t\t\t\t\t[System.Net.Sockets.TcpClient]::new().ConnectAsync($_, 5986).Wait(100)\n\t\t\t\t\t})\n\t\t\t\t{\n\t\t\t\t\t$SessionParameters.Add(\"Port\", 5986)\n\t\t\t\t\t$SessionParameters.Add(\"UseSSL\", $True)\n\t\t\t\t\tTry\n\t\t\t\t\t{\n\t\t\t\t\t\t$result = Test-WSMan @SessionParameters\n\t\t\t\t\t}\n\t\t\t\t\tCatch\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn $SessionParameters\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t({\n\t\t\t\t\t\t#check if host supports non SSL Port\n\t\t\t\t\t\t[System.Net.Sockets.TcpClient]::new().ConnectAsync($_, 5985).Wait(100)\n\t\t\t\t\t})\n\t\t\t\t{\n\t\t\t\t\t$SessionParameters.Add(\"Port\", 5985)\n\t\t\t\t\tTry\n\t\t\t\t\t{\n\t\t\t\t\t\t$result = Test-WSMan @SessionParameters\n\t\t\t\t\t}\n\t\t\t\t\tCatch\n\t\t\t\t\t{\n\t\t\t\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn $SessionParameters\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\tdefault\n\t\t\t\t{\n\t\t\t\t\tWrite-Error \"No connectivity on TCP ports 5985 or 5986 to $Hostname\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Get-WinRMSession\n{\n\tparam (\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t$WinRMNetworkParameters,\n\t\t[Parameter(Mandatory = $True)]\n\t\t[ValidateNotNullOrEmpty()]\n\t\t[System.Management.Automation.PSCredential]$Credential\n\t)\n\t\n\t$WinRMNetworkParameters.Add(\"ErrorAction\", \"Stop\")\n\tTry\n\t{\n\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t}\n\tCatch\n\t{\n\t\t$WinRMNetworkParameters.Add(\"Credential\", $Credential)\n\t\tTry\n\t\t{\n\t\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t\t}\n\t\tCatch\n\t\t{\n\t\t\t$DNSsuffix = $hostname.SubString($hostname.IndexOf(\".\") + 1)\n\t\t\t$NewUsername = $Credential.UserName + \"@\" + $DNSsuffix\n\t\t\t$NewCredential = New-Object System.Management.Automation.PSCredential @($NewUsername, $Credential.Password)\n\t\t\t$WinRMNetworkParameters.Credential = $NewCredential\n\t\t\tTry\n\t\t\t{\n\t\t\t\t$RemoteSession = New-PSSession @WinRMNetworkParameters\n\t\t\t}\n\t\t\tCatch\n\t\t\t{\n\t\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t\t}\n\t\t}\n\t}\n\tIf ($RemoteSession.State -eq 'Opened')\n\t{\n\t\treturn $RemoteSession\t\n\t}\n}\n\n$WinRMNetworkParameters = Get-WinRMNetworkParameters -HostName $Hostname\nIf ($WinRMNetworkParameters.Port)\n{\n\t$Credential = New-Object System.Management.Automation.PSCredential @($LoginUsername, $LoginPassword)\n\t$PSSession = Get-WinRMSession -WinRMNetworkParameters $WinRMNetworkParameters -Credential $Credential\n\tIf ($PSSession)\n\t{\n\t\tTry\n\t\t{\n\t\t\t$Results = Invoke-Command -Session $PSSession -ArgumentList @($UserName, $Password) -ScriptBlock $RemoteHostScript\n\t\t}\n\t\tCatch\n\t\t{\n\t\t\tWrite-Error $Error[0].Exception.ToString()\n\t\t}\n\t\t\n\t\tRemove-PSSession -Session $PSSession\n\t\t$PSSession = $null\n\t\tWrite-Output $Results\n\t}\n}\n",
        "commandType": 1,
        "id": "17e126e3-1cc0-4b9a-9623-8b1b17478dc6",
        "isActive": true,
        "parameters": [
          {
            "name": "Username",
            "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73",
            "source": 1
          },
          {
            "name": "Password",
            "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
            "source": 1
          },
          {
            "name": "Hostname",
            "propertyId": "0294dfac-43c0-4dfb-8fc3-d9e7170e7bda",
            "source": 1
          },
          {
            "name": "LoginUsername",
            "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73"
          },
          {
            "name": "LoginPassword",
            "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b"
          }
        ]
      }
    },
    "description": "",
    "id": "0eaa6fc9-a352-4c96-9987-40a37926ccb1",
    "imageName": "SampleWindowsGrey",
    "name": "Windows Local Accounts",
    "providerProperties": [
      {
        "id": "c24049c5-9ec4-4f26-832c-86f283067c73",
        "isMandatory": true,
        "name": "Username",
        "type": 4
      },
      {
        "id": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
        "isMandatory": true,
        "name": "Password",
        "type": 3
      },
      {
        "id": "3f35f48e-de2d-4f87-9e1d-c45beb25fb6d",
        "name": "Description",
        "type": 7
      },
      {
        "id": "26bd85da-c7ed-447a-ae92-cfd21ebd4bdc",
        "isMandatory": true,
        "name": "Hosts"
      },
      {
        "id": "e13fac46-afc4-40ee-bad3-9550674cbccf",
        "isMandatory": true,
        "name": "ExcludeDisabledAccountsInDiscovery",
        "type": 2
      },
      {
        "id": "0653b613-ea47-4b3c-991f-3766fb996179",
        "name": "HostsLDAPSearchFilter"
      }
    ]
  }
}
