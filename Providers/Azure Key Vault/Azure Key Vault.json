{
  "version": 1,
  "template": {
    "accountProperties": [
      {
        "id": "c24049c5-9ec4-4f26-832c-86f283067c73",
        "isMandatory": true,
        "name": "Name",
        "type": 4
      },
      {
        "id": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
        "isMandatory": true,
        "name": "Secret",
        "type": 3
      },
      {
        "id": "54b6d680-0b89-4ce6-a512-bc98e0008fd7",
        "isMandatory": true,
        "name": "ID",
        "type": 6
      }
    ],
    "commands": {
      "accountDiscovery": {
        "command": "[CmdletBinding()]\nParam (\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$TenantID,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$ApplicationID,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$Password,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$KeyVaultName\n)\n\nIf (($PSVersionTable.PSVersion -LT [System.Version]'7.4.0') -Or $PSVersionTable.PSEdition -NE 'Core') {\n\tWrite-Error \"PowerShell version must be 7.4.0 or greater.\"\n\tExit\n}\n\n# Ensure we are using TLS 1.2\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\nIf ((Get-ExecutionPolicy) -NE 'RemoteSigned' -Or (Get-ExecutionPolicy) -NE 'Unrestricted') {\n\tTry {\n\t\tSet-ExecutionPolicy 'RemoteSigned' -Scope 'Process' -ErrorAction 'Stop'\n\t} Catch {\n\t\tWrite-Error (\"Failed to Set Execution Policy: {0}\" -F $PSItem.Exception.ToString())\n\t\tExit\n\t}\n}\n\n# If you don't have the required Az modules installed, run the following:\n# Install-Module -Name 'Az.Accounts' -Scope 'AllUsers' -RequiredVersion '2.16.0'\n# Install-Module -Name 'Az.KeyVault' -Scope 'AllUsers' -RequiredVersion '5.2.1'\n$ModulesToImport = @{\n\t'Az.Accounts' = @{\n\t\t'Required' = '2.16.0'\n\t}\n\t'Az.KeyVault' = @{\n\t\t'Required' = '5.2.1'\n\t}\n}\n\n$ModulesToImport.GetEnumerator() | ForEach-Object {\n\tTry {\n\t\tImport-Module -Name $PSItem.Key -RequiredVersion $PSItem.Value.Required -ErrorAction 'Stop'\n\t} Catch {\n\t\tWrite-Error (\"Failed to Import Module: {0}\" -F $PSItem.Exception.ToString())\n\t\tExit\n\t}\n}\n\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationID, $Password\n\nTry {\n\t$Account = Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential -ErrorAction 'Stop'\n} Catch {\n\tWrite-Error (\"Failed to Connect to Azure: {0}\" -F $PSItem.Exception.ToString())\n\tExit\n}\n\nTry {\n\t$Vault = Get-AzKeyVault -VaultName $KeyVaultName -ErrorAction 'Stop'\n} Catch {\n\tWrite-Error (\"Failed to Retrieve Key Vault: {0}\" -F $PSItem.Exception.ToString())\n\tExit\n}\n\nIf ($Vault) {\n\tTry {\n\t\t$Secrets = $Vault | Get-AzKeyVaultSecret\n\t} Catch {\n\t\tWrite-Error (\"Failed to Retrieve Secrets: {0}\" -F $PSItem.Exception.ToString())\n\t}\n\n\tIf ($Secrets) {\n\t\t$ParsedSecrets = $Secrets | ForEach-Object {\n\t\t\tTry {\n\t\t\t\t$Secret = $Vault | Get-AzKeyVaultSecret -Name $PSItem.Name -AsPlainText -ErrorAction 'Stop'\n\t\t\t} Catch {\n\t\t\t\tWrite-Error (\"Failed to Retrieve Secret: {0}\" -F $PSItem.Exception.ToString())\n\t\t\t}\n\n\t\t\tIf ($Secret) {\n\t\t\t\t[PSCustomObject]@{\n\t\t\t\t\t'ID'     = $PSItem.Id\n\t\t\t\t\t'Name'   = $PSItem.Name\n\t\t\t\t\t'Secret' = $Secret\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tReturn $ParsedSecrets\n\t} Else {\n\t\tWrite-Error \"No Secrets Found\"\n\t}\n} Else {\n\tWrite-Error \"Key Vault not Found\"\n}",
        "commandType": 2,
        "id": "b6fa39d3-3517-41b5-ad27-202366e41faa",
        "isActive": true,
        "parameters": [
          {
            "name": "TenantID",
            "propertyId": "40f3f4d2-9985-4cd4-922f-8c33ebf71f99"
          },
          {
            "name": "Password",
            "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b"
          },
          {
            "name": "ApplicationID",
            "propertyId": "bc38b9b0-e306-4aed-a0bb-896cd9f0faff"
          },
          {
            "name": "KeyVaultName",
            "propertyId": "bd4dbe9f-8afc-409b-a86e-b17e66773b56"
          }
        ]
      },
      "heartbeat": {
        "command": "[CmdletBinding()]\nParam (\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$TenantID,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$ApplicationID,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$Password,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$KeyVaultName,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Name,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$Secret\n)\n\nIf (($PSVersionTable.PSVersion -LT [System.Version]'7.4.0') -Or $PSVersionTable.PSEdition -NE 'Core') {\n\tWrite-Error \"PowerShell version must be 7.4.0 or greater.\"\n\tExit\n}\n\n# Ensure we are using TLS 1.2\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\nIf ((Get-ExecutionPolicy) -NE 'RemoteSigned' -Or (Get-ExecutionPolicy) -NE 'Unrestricted') {\n\tTry {\n\t\tSet-ExecutionPolicy 'RemoteSigned' -Scope 'Process' -ErrorAction 'Stop'\n\t} Catch {\n\t\tWrite-Error (\"Failed to Set Execution Policy: {0}\" -F $PSItem.Exception.ToString())\n\t\tExit\n\t}\n}\n\n# If you don't have the required Az modules installed, run the following:\n# Install-Module -Name 'Az.Accounts' -Scope 'AllUsers' -RequiredVersion '2.16.0'\n# Install-Module -Name 'Az.KeyVault' -Scope 'AllUsers' -RequiredVersion '5.2.1'\n$ModulesToImport = @{\n\t'Az.Accounts' = @{\n\t\t'Required' = '2.16.0'\n\t}\n\t'Az.KeyVault' = @{\n\t\t'Required' = '5.2.1'\n\t}\n}\n\n$ModulesToImport.GetEnumerator() | ForEach-Object {\n\tTry {\n\t\tImport-Module -Name $PSItem.Key -RequiredVersion $PSItem.Value.Required -ErrorAction 'Stop'\n\t} Catch {\n\t\tWrite-Error (\"Failed to Import Module: {0}\" -F $PSItem.Exception.ToString())\n\t\tExit\n\t}\n}\n\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationID, $Password\n\nTry {\n  $Account = Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential -ErrorAction 'Stop'\n} Catch {\n  Write-Error (\"Failed to Connect to Azure: {0}\" -F $Error[0].Exception.ToString())\n  Exit\n}\n\nTry {\n  $Vault = Get-AzKeyVault -VaultName $KeyVaultName -ErrorAction 'Stop'\n} Catch {\n  Write-Error (\"Failed to Retrieve Key Vault: {0}\" -F $Error[0].Exception.ToString())\n  Exit\n}\n\nIf ($Vault) {\n  Try {\n    # The Get-AzKeyVaultSecret does not support retrieve by ID\n    $RetrievedSecret = $Vault | Get-AzKeyVaultSecret -Name $Name -ErrorAction 'Stop'\n  } Catch {\n    Write-Error (\"Failed to Retrieve Secrets: {0}\" -F $PSItem.Exception.ToString())\n  }\n\n  If ($RetrievedSecret) {\n    Try {\n      $SecretPassword = $Vault | Get-AzKeyVaultSecret -Name $RetrievedSecret.Name -AsPlainText -ErrorAction 'Stop'\n    } Catch {\n      Write-Error \"Failed to retrieve password: $($PSItem.Exception.ToString())\"\n    }\n\n    If ($SecretPassword) {\n      If ($SecretPassword -EQ ($Secret | ConvertFrom-SecureString -AsPlainText)) {\n        Return $True\n      } Else {\n        Write-Error \"Password Does Not Match\"\n      }\n    } Else {\n      Write-Error \"No Password Value Returned\"\n    }\n  } Else {\n    Write-Error \"Failed to find secrets by name\"\n  }\n}",
        "commandType": 1,
        "id": "8a098387-0770-4a35-a8dc-8abed1029199",
        "isActive": true,
        "parameters": [
          {
            "name": "TenantID",
            "propertyId": "40f3f4d2-9985-4cd4-922f-8c33ebf71f99"
          },
          {
            "name": "ApplicationID",
            "propertyId": "bc38b9b0-e306-4aed-a0bb-896cd9f0faff"
          },
          {
            "name": "Password",
            "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b"
          },
          {
            "name": "KeyVaultName",
            "propertyId": "bd4dbe9f-8afc-409b-a86e-b17e66773b56"
          },
          {
            "name": "Name",
            "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73",
            "source": 1
          },
          {
            "name": "Secret",
            "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
            "source": 1
          }
        ]
      },
      "resetPassword": {
        "command": "[CmdletBinding()]\nParam (\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$TenantID,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$ApplicationID,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$Password,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$KeyVaultName,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Name,\n  [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$NewPassword\n)\n\nIf (($PSVersionTable.PSVersion -LT [System.Version]'7.4.0') -Or $PSVersionTable.PSEdition -NE 'Core') {\n\tWrite-Error \"PowerShell version must be 7.4.0 or greater.\"\n\tExit\n}\n\n# Ensure we are using TLS 1.2\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\nIf ((Get-ExecutionPolicy) -NE 'RemoteSigned' -Or (Get-ExecutionPolicy) -NE 'Unrestricted') {\n\tTry {\n\t\tSet-ExecutionPolicy 'RemoteSigned' -Scope 'Process' -ErrorAction 'Stop'\n\t} Catch {\n\t\tWrite-Error (\"Failed to Set Execution Policy: {0}\" -F $PSItem.Exception.ToString())\n\t\tExit\n\t}\n}\n\n# If you don't have the required Az modules installed, run the following:\n# Install-Module -Name 'Az.Accounts' -Scope 'AllUsers' -RequiredVersion '2.16.0'\n# Install-Module -Name 'Az.KeyVault' -Scope 'AllUsers' -RequiredVersion '5.2.1'\n$ModulesToImport = @{\n\t'Az.Accounts' = @{\n\t\t'Required' = '2.16.0'\n\t}\n\t'Az.KeyVault' = @{\n\t\t'Required' = '5.2.1'\n\t}\n}\n\n$ModulesToImport.GetEnumerator() | ForEach-Object {\n\tTry {\n\t\tImport-Module -Name $PSItem.Key -RequiredVersion $PSItem.Value.Required -ErrorAction 'Stop'\n\t} Catch {\n\t\tWrite-Error (\"Failed to Import Module: {0}\" -F $PSItem.Exception.ToString())\n\t\tExit\n\t}\n}\n\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationID, $Password\n\nTry {\n\t$Account = Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential -ErrorAction 'Stop'\n} Catch {\n\tWrite-Error (\"Failed to Connect to Azure: {0}\" -F $PSItem.Exception.ToString())\n\tExit\n}\n\nTry {\n\t$Vault = Get-AzKeyVault -VaultName $KeyVaultName -ErrorAction 'Stop'\n} Catch {\n\tWrite-Error (\"Failed to Retrieve Key Vault: {0}\" -F $PSItem.Exception.ToString())\n\tExit\n}\n\nIf ($Vault) {\n  Try {\n    # The Get-AzKeyVaultSecret does not support retrieve by ID\n    $RetrievedSecret = $Vault | Get-AzKeyVaultSecret -Name $Name -ErrorAction 'Stop'\n  } Catch {\n    Write-Error (\"Failed to Retrieve Secrets: {0}\" -F $PSItem.Exception.ToString())\n  }\n\n  If ($RetrievedSecret) {\n    Try {\n      $Result = Set-AzKeyVaultSecret -Vault $Vault.VaultName -Name $RetrievedSecret.Name -SecretValue $NewPassword -ErrorAction 'Stop'\n    } Catch {\n      Write-Error \"Failed to retrieve password: $($PSItem.Exception.ToString())\"\n    }\n\n    If ($Result) {\n      Return $True\n    } Else {\n      Write-Error \"Failed to Update Secret\"\n    }\n  } Else {\n    Write-Error \"Failed to find secrets by name\"\n  }\n}",
        "id": "0d4bc42a-5621-4f8a-8a08-b3fecf390538",
        "isActive": true,
        "parameters": [
          {
            "name": "TenantID",
            "propertyId": "40f3f4d2-9985-4cd4-922f-8c33ebf71f99"
          },
          {
            "name": "ApplicationID",
            "propertyId": "bc38b9b0-e306-4aed-a0bb-896cd9f0faff"
          },
          {
            "name": "Password",
            "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b"
          },
          {
            "name": "KeyVaultName",
            "propertyId": "bd4dbe9f-8afc-409b-a86e-b17e66773b56"
          },
          {
            "name": "Name",
            "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73",
            "source": 1
          }
        ]
      }
    },
    "description": "",
    "id": "d8e31763-c31d-4d51-acac-cbad169c6208",
    "imageName": "SampleAzureKeyVaultBlue",
    "name": "Azure Key Vault",
    "providerProperties": [
      {
        "id": "40f3f4d2-9985-4cd4-922f-8c33ebf71f99",
        "isMandatory": true,
        "name": "TenantID"
      },
      {
        "id": "bc38b9b0-e306-4aed-a0bb-896cd9f0faff",
        "isMandatory": true,
        "name": "ApplicationID"
      },
      {
        "id": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
        "isMandatory": true,
        "name": "Password",
        "type": 3
      },
      {
        "id": "bd4dbe9f-8afc-409b-a86e-b17e66773b56",
        "isMandatory": true,
        "name": "KeyVaultName"
      }
    ]
  }
}