{
  "version": 1,
  "template": {
    "command": "Describe 'Scheduled task propagation script' {\n\n    $mandatoryParameters = @{\n        'Endpoint'         = 'windowsserverhere'\n        'EndpointUserName' = 'userhere'\n        'EndpointPassword' = (ConvertTo-SecureString -String 'passwordhere' -AsPlainText -Force)\n        'AccountUserName'  = 'taskuserhere'\n        'NewPassword'      = (ConvertTo-SecureString -String 'passwordhere' -AsPlainText -Force)\n    }\n    $parameterSets = @(\n        @{\n            label         = 'all scheduled tasks running under the user account'\n            parameter_set = $mandatoryParameters\n        },\n        @{\n            label         = 'one specific scheduled task by name'\n            parameter_set = ($mandatoryParameters + @{\n                    ScheduledTaskName = 'task1'\n                })\n        },\n        @{\n            label         = 'multiple specific scheduled tasks by name'\n            parameter_set = ($mandatoryParameters + @{\n                    ScheduledTaskName = 'task1,task2'\n                })\n        },\n        @{\n            label         = 'one task path'\n            parameter_set = ($mandatoryParameters + @{\n                    ScheduledTaskPath = '\\path\\to\\task1\\'\n                })\n        },\n        @{\n            label         = 'multiple task paths'\n            parameter_set = ($mandatoryParameters + @{\n                    ScheduledTaskPath = '\\path\\to\\task1\\,\\path\\to\\task2\\'\n                })\n        },\n        @{\n            label         = 'one specific scheduled task by name and path'\n            parameter_set = ($mandatoryParameters + @{\n                    ScheduledTaskName = 'task1'\n                    ScheduledTaskPath = '\\path\\to\\task1\\'\n                })\n        },\n        @{\n            label         = 'multiple specific scheduled tasks by name and path'\n            parameter_set = ($mandatoryParameters + @{\n                    ScheduledTaskName = 'task1,task2'\n                    ScheduledTaskPath = '\\path\\to\\task1\\,\\path\\to\\task2\\'\n                })\n        }\n    )\n\n    It 'has a README doc' {\n        \"$PSScriptRoot\\README.md\" | Should -Exist\n    }\n\n    It 'has a prerequisites test script' {\n        \"$PSScriptRoot\\prerequisites.tests.ps1\" | Should -Exist\n    }\n\n    it 'has a DVLS template created' {\n        \"$PSScriptRoot\\template.json\" | Should -Exist\n    }\n\n    Context 'when no scheduled tasks running the the specified username exist' {\n\n        BeforeAll {\n            Mock 'Write-Output'\n            Mock Invoke-Command {\n                $functionsToDefine = @{\n                    'Get-ScheduledTask' = {}\n                }\n    \n                # Define mock variables if necessary\n                $variablesToDefine = New-Object System.Collections.Generic.List[System.Management.Automation.PSVariable]\n    \n                # Invoke the script block with mock context and arguments\n                $ScriptBlock.InvokeWithContext($functionsToDefine, $variablesToDefine, $ArgumentList)\n            }\n        }\n\n        It 'throws the expected error message : <_.label>' -ForEach $parameterSets {\n\n            { & \"$PSScriptRoot\\script.ps1\" @parameter_set } | Should -Throw '*No scheduled tasks found on * running as * could be found*'\n\n        }\n\n    }\n\n    Context 'when at least one specific scheduled task could not be found' {\n\n        $ctxParameterSets = $parameterSets.where({ $_.parameter_set.ContainsKey('ScheduledTaskName') })\n\n        BeforeAll {\n            Mock 'Write-Output'\n            Mock Invoke-Command {\n                $functionsToDefine = @{\n                    'Set-ScheduledTask'  = {}\n                    'Get-ScheduledTask' = {\n                        @([pscustomobject]@{\n                            TaskName      = 'nomatchingname'\n                            Principal = @{\n                                'UserId' = 'taskuserhere'\n                            }\n                        }\n                        [pscustomobject]@{\n                            Name      = 'nomatchingname'\n                            StartName = 'somerandomuserhere'\n                        })\n                    }\n                }\n    \n                # Define mock variables if necessary\n                $variablesToDefine = New-Object System.Collections.Generic.List[System.Management.Automation.PSVariable]\n    \n                # Invoke the script block with mock context and arguments\n                $ScriptBlock.InvokeWithContext($functionsToDefine, $variablesToDefine, $ArgumentList)\n            }\n        }\n\n        It 'throws the expected error message : <_.label>' -ForEach $ctxParameterSets {\n            { & \"$PSScriptRoot\\script.ps1\" @parameter_set } | Should -Throw '*The following scheduled tasks could not be found on host*'\n\n        }\n\n    }\n\n    Context 'when applicable scheduled tasks are found and running' {\n\n        BeforeAll {\n            Mock 'Write-Output'\n        }\n        \n        It 'returns $true if all scheduled tasks are reset successfully : <_.label>' -ForEach $parameterSets {\n\n            Mock Invoke-Command {\n                $functionsToDefine = @{\n                    'Get-ScheduledTask'  = {\n                        @([pscustomobject]@{\n                                TaskName      = 'task1'\n                                Principal = [pscustomobject]@{\n                                    'UserId' = 'taskuserhere'\n                                }\n                            }\n                            [pscustomobject]@{\n                                TaskName      = 'task2'\n                                Principal = [pscustomobject]@{\n                                    'UserId' = 'taskuserhere'\n                                }\n                            })\n                    }\n                    'Set-ScheduledTask'  = {}\n                }\n    \n                # Define mock variables if necessary\n                $variablesToDefine = New-Object System.Collections.Generic.List[System.Management.Automation.PSVariable]\n    \n                # Invoke the script block with mock context and arguments\n                $ScriptBlock.InvokeWithContext($functionsToDefine, $variablesToDefine, $ArgumentList)\n            }\n\n            & \"$PSScriptRoot\\script.ps1\" @parameter_set | Should -BeTrue\n        }\n\n\n        It 'throws the expected error when at least one password reset fails with a wrong password : <_.label>' -ForEach $parameterSets {\n\n            Mock Invoke-Command {\n                $functionsToDefine = @{\n                    'Get-ScheduledTask'  = {\n                        @([pscustomobject]@{\n                                TaskName      = 'task1'\n                                Principal = @{\n                                    'UserId' = 'taskuserhere'\n                                }\n                            }\n                            [pscustomobject]@{\n                                TaskName      = 'task2'\n                                Principal = @{\n                                    'UserId' = 'taskuserhere'\n                                }\n                            })\n                    }\n                    'Set-ScheduledTask' = {\n                        throw 'The user name or password is incorrect'\n                    }\n                }\n    \n                # Define mock variables if necessary\n                $variablesToDefine = New-Object System.Collections.Generic.List[System.Management.Automation.PSVariable]\n    \n                # Invoke the script block with mock context and arguments\n                $ScriptBlock.InvokeWithContext($functionsToDefine, $variablesToDefine, $ArgumentList)\n            }\n\n            { & \"$PSScriptRoot\\script.ps1\" @parameter_set } | Should -Throw '*NewPassword for `[taskuserhere`] user account does not match provider for scheduled task * running on * host*'\n        }\n    }\n\n    context 'when an invalid string is passed to the ScheduledTaskPath parameter' {\n\n        [array]$ctxParameterSets = $mandatoryParameters + @{ ScheduledTaskPath = 'somethinginvalid'}\n\n        it 'does not allow invalid scheduled task paths' -ForEach $ctxParameterSets {\n            { & \"$PSScriptRoot\\script.ps1\" @_ } | Should -Throw \"*Cannot validate argument on parameter 'ScheduledTaskPath'*\"\n        }\n\n    }\n}",
    "configurationProperties": [
      {
        "id": "c67e2738-96cd-48e0-b12e-618f2cf69af1",
        "isMandatory": true,
        "name": "Endpoint"
      },
      {
        "id": "ae08ff94-ab60-4679-aab5-f6a327b5edc8",
        "isMandatory": true,
        "name": "EndpointUserName"
      },
      {
        "id": "2dc3b0eb-0504-41ad-bd8c-8c3fb34ec277",
        "isMandatory": true,
        "name": "EndpointPassword",
        "type": 5
      }
    ],
    "description": "Updates a Scheduled task user password for one or more Windows hosts.",
    "executionProperties": [
      {
        "id": "e928182a-edd5-462e-9fa4-7c970fbcfc78",
        "isMandatory": true,
        "name": "AccountUserName",
        "type": 8
      },
      {
        "id": "9eb056ef-7d96-4499-a146-9a1fdb1410fb",
        "isMandatory": true,
        "name": "ScheduledTaskName"
      },
      {
        "id": "ef26d54b-982e-48b9-8f7e-910a93327ab4",
        "isMandatory": true,
        "name": "ScheduledTaskPath"
      }
    ],
    "id": "89e45066-1ebb-483d-bf35-c9aa4f5a312b",
    "imageName": "",
    "name": "Scheduled Task"
  }
}