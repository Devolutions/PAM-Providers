{
  "version": 1,
  "template": {
    "command": "[CmdletBinding()]\nParam (\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$AzureTenantID,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$AzureApplicationID,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$AzureApplicationSecret,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Cluster,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Deployment,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Namespace,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$SecretName,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$ConfigPath,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$NewPassword\n)\n\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n# Ensure execution policy is correct\nIf ((Get-ExecutionPolicy) -NE 'RemoteSigned' -Or (Get-ExecutionPolicy) -NE 'Unrestricted') {\n    Set-ExecutionPolicy 'RemoteSigned' -Scope 'Process'\n}\n\n# Convert SecureString to plain text\n$PlainTextPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto(\n    [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($AzureApplicationSecret)\n)\n$PlainTextNewPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto(\n    [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($NewPassword)\n)\n\n# Authenticate using Service Principal with az login\nTry {\n    $azLogin = az login --service-principal -u $AzureApplicationID -p $PlainTextPassword --tenant $AzureTenantID\n    if (-not $azLogin) {\n        throw \"Azure login failed.\"\n    }\n    Write-Output \"Azure login successful.\"\n} Catch {\n    Write-Error (\"Failed to login to Azure: {0}\" -F $_.Exception.Message)\n    Exit\n}\n\naz account set --subscription development\n\n# Set environment variables for KUBECONFIG\n$env:KUBECONFIG = $ConfigPath\n\n# Use the correct Kubernetes context\nTry {\n    kubectl config use-context $Cluster\n    Write-Output \"Switched to Kubernetes cluster context: $Cluster\"\n} Catch {\n    Write-Error (\"Failed to switch Kubernetes context: {0}\" -F $_.Exception.Message)\n    Exit\n}\n\n# Verify connection to the Kubernetes cluster\nTry {\n    kubectl get nodes\n    Write-Output \"Successfully accessed the Kubernetes cluster.\"\n} Catch {\n    Write-Error (\"Failed to access the Kubernetes cluster: {0}\" -F $_.Exception.Message)\n    Exit\n}\n\n# Delete the existing secret\nTry {\n    kubectl delete secret $SecretName -n $Namespace\n    Write-Output \"Secret $SecretName deleted in namespace $Namespace.\"\n} Catch {\n    Write-Error (\"Failed to delete secret: {0}\" -F $_.Exception.Message)\n}\n\n# Create a new secret with the updated password\nTry {\n    kubectl create secret generic $SecretName --from-literal=test-key-something=$PlainTextNewPassword -n $Namespace\n    Write-Output \"Secret $SecretName created with updated password in namespace $Namespace.\"\n} Catch {\n    Write-Error (\"Failed to create secret: {0}\" -F $_.Exception.Message)\n    Exit\n}\n\n# Immediately clear the plain text password from memory\n$PlainTextNewPassword = $null\n\n# Restart the deployment to apply the new secret\nTry {\n    kubectl rollout restart deployment/$Deployment -n $Namespace\n    Write-Output \"Deployment $Deployment restarted in namespace $Namespace.\"\n} Catch {\n    Write-Error (\"Failed to restart deployment: {0}\" -F $_.Exception.Message)\n    Exit\n}\n",
    "configurationProperties": [
      {
        "id": "428bef27-a0be-4da1-a0a6-c2bc1260927b",
        "isMandatory": true,
        "name": "AzureTenantID"
      },
      {
        "id": "4c7cd1ef-18f0-46f0-b21c-689224a6b8e7",
        "isMandatory": true,
        "name": "AzureApplicationID"
      },
      {
        "id": "9ed002cc-90f1-4b72-bc31-29cd14b4d00f",
        "isMandatory": true,
        "name": "AzureApplicationSecret",
        "type": 5
      }
    ],
    "description": "Change de value of a secret to a corresponding secret in the desired cluster.",
    "executionProperties": [
      {
        "id": "7d56fbae-514a-4312-85c1-76a559270c11",
        "isMandatory": true,
        "name": "Cluster"
      },
      {
        "id": "4e4eeb6f-1dc7-47ac-bf94-afe5f6e885dc",
        "isMandatory": true,
        "name": "Deployment"
      },
      {
        "id": "4d5123bd-b732-43de-a062-26a826bdf6f5",
        "isMandatory": true,
        "name": "Namespace"
      },
      {
        "id": "36185c48-66df-40df-be55-3a1f90a68785",
        "isMandatory": true,
        "name": "SecretName"
      },
      {
        "id": "7ade65d3-2e20-43eb-a032-5936b4b88622",
        "isMandatory": true,
        "name": "ConfigPath"
      }
    ],
    "id": "7228ff7d-f8a0-4828-be91-1038053a2e63",
    "imageName": "SampleLetterKRoyal",
    "name": "AKS Secret Rotation"
  }
}
