{
  "version": 2,
  "template": {
    "command": "[CmdletBinding()]\nParam (\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$AzureTenantID,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$AzureApplicationID,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$AzureApplicationSecret,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Cluster,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Deployment,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Namespace,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$SecretName,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$ConfigPath,\n    [Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][SecureString]$NewPassword\n)\n\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n# Ensure execution policy is correct\nIf ((Get-ExecutionPolicy) -NE 'RemoteSigned' -Or (Get-ExecutionPolicy) -NE 'Unrestricted') {\n    Set-ExecutionPolicy 'RemoteSigned' -Scope 'Process'\n}\n\n# Convert SecureString to plain text\n$PlainTextPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto(\n    [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($AzureApplicationSecret)\n)\n$PlainTextNewPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto(\n    [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($NewPassword)\n)\n\n# Authenticate using Service Principal with az login\nTry {\n    $azLogin = az login --service-principal -u $AzureApplicationID -p $PlainTextPassword --tenant $AzureTenantID\n    if (-not $azLogin) {\n        throw \"Azure login failed.\"\n    }\n    Write-Output \"Azure login successful.\"\n} Catch {\n    Write-Error (\"Failed to login to Azure: {0}\" -F $_.Exception.Message)\n    Exit\n}\n\naz account set --subscription development\n\n# Set environment variables for KUBECONFIG\n$env:KUBECONFIG = $ConfigPath\n\n# Use the correct Kubernetes context\nTry {\n    kubectl config use-context $Cluster\n    Write-Output \"Switched to Kubernetes cluster context: $Cluster\"\n} Catch {\n    Write-Error (\"Failed to switch Kubernetes context: {0}\" -F $_.Exception.Message)\n    Exit\n}\n\n# Verify connection to the Kubernetes cluster\nTry {\n    kubectl get nodes\n    Write-Output \"Successfully accessed the Kubernetes cluster.\"\n} Catch {\n    Write-Error (\"Failed to access the Kubernetes cluster: {0}\" -F $_.Exception.Message)\n    Exit\n}\n\n# Delete the existing secret\nTry {\n    kubectl delete secret $SecretName -n $Namespace\n    Write-Output \"Secret $SecretName deleted in namespace $Namespace.\"\n} Catch {\n    Write-Error (\"Failed to delete secret: {0}\" -F $_.Exception.Message)\n}\n\n# Create a new secret with the updated password\nTry {\n    kubectl create secret generic $SecretName --from-literal=test-key-something=$PlainTextNewPassword -n $Namespace\n    Write-Output \"Secret $SecretName created with updated password in namespace $Namespace.\"\n} Catch {\n    Write-Error (\"Failed to create secret: {0}\" -F $_.Exception.Message)\n    Exit\n}\n\n# Immediately clear the plain text password from memory\n$PlainTextNewPassword = $null\n\n# Restart the deployment to apply the new secret\nTry {\n    kubectl rollout restart deployment/$Deployment -n $Namespace\n    Write-Output \"Deployment $Deployment restarted in namespace $Namespace.\"\n} Catch {\n    Write-Error (\"Failed to restart deployment: {0}\" -F $_.Exception.Message)\n    Exit\n}",
    "configurationProperties": [
      {
        "id": "e7147a48-c0d8-430e-811e-175a8cbca6a7",
        "isMandatory": true,
        "name": "AzureTenantID"
      },
      {
        "id": "9d921511-d9ca-4605-afea-e3c87e117b72",
        "isMandatory": true,
        "name": "AzureApplicationID"
      },
      {
        "id": "04586d1a-a998-4c7d-9bd2-42639af8355e",
        "isMandatory": true,
        "name": "AzureApplicationSecret",
        "type": 5
      },
      {
        "id": "81d10c89-8732-4f03-9c73-2ba5dee90419",
        "isMandatory": true,
        "name": "Cluster"
      },
      {
        "id": "ff27a379-12d8-43fe-a867-1672b0872f66",
        "isMandatory": true,
        "name": "Deployment"
      },
      {
        "id": "c3293c04-4fd9-4c59-b49b-2c4b3abf90be",
        "isMandatory": true,
        "name": "Namespace"
      },
      {
        "id": "4602574e-47df-4fbe-8c39-fc5394afd5dc",
        "isMandatory": true,
        "name": "ConfigPath"
      }
    ],
    "description": "Change de value of a secret to a corresponding secret in the desired cluster.",
    "executionProperties": [],
    "id": "45af6d9f-8384-4728-8308-c2c74727142e",
    "imageName": "SampleLetterKPurple",
    "name": "AKS Secret Rotation",
    "parameters": [
      {
        "name": "AzureTenantID",
        "propertyId": "e7147a48-c0d8-430e-811e-175a8cbca6a7"
      },
      {
        "name": "AzureApplicationID",
        "propertyId": "9d921511-d9ca-4605-afea-e3c87e117b72"
      },
      {
        "name": "AzureApplicationSecret",
        "propertyId": "04586d1a-a998-4c7d-9bd2-42639af8355e"
      },
      {
        "name": "Cluster",
        "propertyId": "81d10c89-8732-4f03-9c73-2ba5dee90419"
      },
      {
        "name": "Deployment",
        "propertyId": "ff27a379-12d8-43fe-a867-1672b0872f66"
      },
      {
        "name": "Namespace",
        "propertyId": "c3293c04-4fd9-4c59-b49b-2c4b3abf90be"
      },
      {
        "name": "ConfigPath",
        "propertyId": "4602574e-47df-4fbe-8c39-fc5394afd5dc"
      },
      {
        "name": "NewPassword",
        "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
        "source": 1
      },
      {
        "name": "SecretName",
        "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73",
        "source": 1
      }
    ],
    "version": 2
  }
}