{
  "version": 2,
  "template": {
    "command": "<#\n.SYNOPSIS\nSends a password change event to Splunk using the HTTP Event Collector (HEC).\n\n.DESCRIPTION\nThis script sends a password change event to Splunk using the HTTP Event Collector (HEC). It connects to a Splunk server, \nprepares an event with the password change information, and sends it to Splunk. The script is designed to be used as a \npropagation script in the Devolutions PAM (Privileged Access Management) module.\n\n.PARAMETER SplunkHost\nThe hostname or IP address of the Splunk server.\n\n.PARAMETER HECToken\nA secure string containing the HTTP Event Collector (HEC) token for authentication with Splunk.\n\n.PARAMETER UserName\nThe username of the account for which the password was changed.\n\n.PARAMETER NewPassword\nA secure string containing the new password. This parameter is not used in the current implementation but is required for compatibility with the PAM module.\n\n.PARAMETER Source\nThe source of the event as it will appear in Splunk. If not specified, it defaults to \"DevolutionsPAM\".\n\n.PARAMETER Port\nThe port number for the Splunk HEC. If not specified, it defaults to 8088.\n\n.PARAMETER Protocol\nThe protocol to use for the connection to Splunk. Valid values are \"http\" or \"https\". If not specified, it defaults to \"https\".\n\n.EXAMPLE\n$hecToken = ConvertTo-SecureString \"YourHECTokenHere\" -AsPlainText -Force\n$newPassword = ConvertTo-SecureString \"NewPassword123!\" -AsPlainText -Force\n.\\Send-SplunkPasswordChangeEvent.ps1 -SplunkHost \"splunk.example.com\" -HECToken $hecToken -UserName \"john.doe\" -NewPassword $newPassword\n\nThis example sends a password change event for user \"john.doe\" to the Splunk server at \"splunk.example.com\" using the specified HEC token.\n\n.NOTES\n- Ensure that the HEC token has the necessary permissions to send events to Splunk.\n- The script uses HTTPS by default and skips certificate validation. In a production environment, proper certificate validation should be implemented.\n- This script is designed to be used with Devolutions PAM module and follows its propagation script requirements.\n- The NewPassword parameter is not used in the current implementation but is required for compatibility with the PAM module.\n\n.LINK\nhttps://docs.devolutions.net/server/privileged-access-management/password-propagation/\n\n.LINK\nhttps://docs.splunk.com/Documentation/Splunk/latest/Data/UsetheHTTPEventCollector\n#>\n\n[CmdletBinding()]\nParam(\n    [Parameter(Mandatory)]\n    [string]$SplunkHost,\n\n    [Parameter(Mandatory)]\n    [securestring]$HECToken,\n\n    [Parameter(Mandatory)]\n    [string]$UserName,\n\n    ## placeholder; not used\n    [Parameter()]\n    [securestring]$NewPassword,\n\n    [Parameter()]\n    [string]$Source,\n\n    [Parameter()]\n    [string]$Port,\n\n    [Parameter()]\n    [ValidateSet('',\"http\", \"https\")]\n    [string]$Protocol\n)\n\n$ErrorActionPreference = 'Stop'\n\n#region functions\nfunction decryptSecureString ([securestring]$SecureString) {\n    # Decrypts a secure string\n    try {\n        $ptr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecureString)\n        [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ptr)\n    } finally {\n        ## Clear the decrypted secret from memory\n        [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ptr)\n    }\n}\n\nfunction Connect-Splunk {\n    <#\n    .SYNOPSIS\n        Connects to a Splunk server using either user credentials or a HEC (HTTP Event Collector) token.\n\n    .DESCRIPTION\n        The Connect-Splunk function establishes a connection to a Splunk server specified by the ComputerName parameter. It supports two methods of \n        authentication: using user credentials or an HTTP Event Collector (HEC) token. Based on the provided parameter set, it configures the \n        appropriate port and authentication method.\n\n    .PARAMETER ComputerName\n        The name or IP address of the Splunk server to connect to. This parameter is mandatory.\n\n    .PARAMETER Port\n        The port number to connect to on the Splunk server. If not specified, the default port is 8089 for credential-based authentication \n        and 8088 for HEC token-based authentication.\n\n    .PARAMETER Protocol\n        The protocol used for the connection. The default value is \"https\".\n\n    .PARAMETER Credential\n        A PSCredential object that contains the username and password for authentication. This parameter is mandatory when using the 'Credential' \n        parameter set.\n\n    .PARAMETER HECToken\n        A secure string representing the HTTP Event Collector token for authentication. This parameter is mandatory when using the 'HECToken' \n        parameter set.\n\n    .NOTES\n        For more information on Splunk authentication, visit: https://docs.splunk.com/Documentation/Splunk/latest/Security/Aboutauthentication\n\n    .EXAMPLE\n        PS> Connect-Splunk -ComputerName \"splunkserver\" -Credential (Get-Credential)\n        @{\n            ComputerName = \"splunkserver\"\n            Port         = 8089\n            Protocol     = \"https\"\n            AuthToken    = <SecureString>\n            HECToken     = $null\n        }\n\n        Connects to the Splunk server 'splunkserver' using user credentials. The port is set to 8089 and protocol to 'https'. The authentication \n        token is returned as a secure string.\n\n    .EXAMPLE\n        PS> Connect-Splunk -ComputerName \"splunkserver\" -HECToken (ConvertTo-SecureString \"your-hec-token\" -AsPlainText -Force)\n        @{\n            ComputerName = \"splunkserver\"\n            Port         = 8088\n            Protocol     = \"https\"\n            AuthToken    = $null\n            HECToken     = <SecureString>\n        }\n\n        Connects to the Splunk server 'splunkserver' using an HEC token for authentication. The port is set to 8088 and protocol to 'https'. The \n        HEC token is returned as a secure string.\n    #>\n\n    [CmdletBinding(DefaultParameterSetName = 'HECToken')]\n    Param(\n        [Parameter(Mandatory)]\n        [String]$ComputerName,\n        \n        [Parameter(Mandatory)]\n        [int]$Port,\n        \n        [Parameter(Mandatory)]\n        [String]$Protocol,\n        \n        [Parameter(Mandatory, ParameterSetName = 'Credential')]\n        [pscredential]$Credential,\n\n        [Parameter(Mandatory, ParameterSetName = 'HECToken')]\n        [securestring]$HECToken\n    )\n\n    $outObj = @{\n        ComputerName = $ComputerName\n        Port         = $Port\n        Protocol     = $Protocol\n        AuthToken    = $null\n        HECToken     = $null\n    }\n\n    if ($PSCmdlet.ParameterSetName -eq 'Credential') {\n        $authParams = @{\n            ComputerName = $ComputerName\n            Port         = $Port\n            Protocol     = $Protocol\n            Credential   = $Credential\n        }\n\n        $authToken = Get-SplunkAuthToken @authParams\n        $outObj.AuthToken = $authToken.AuthToken | ConvertTo-SecureString -AsPlainText -Force\n    } else {\n        $outObj.HECToken = $HECToken\n    }\n\n    $outObj\n}\n\nfunction Get-SplunkAuthToken {\n    <#\n    .SYNOPSIS\n        Retrieves an authentication token from a Splunk server using provided credentials.\n\n    .DESCRIPTION\n        The Get-SplunkAuthToken function authenticates to a Splunk server using the specified username and password, and retrieves an authentication \n        token. This token can be used for subsequent authenticated requests to the Splunk server.\n\n    .PARAMETER ComputerName\n        The name or IP address of the Splunk server to connect to. This parameter is mandatory.\n\n    .PARAMETER Port\n        The port number to connect to on the Splunk server. The default value is 8089.\n\n    .PARAMETER Protocol\n        The protocol used for the connection, either \"http\" or \"https\". The default value is \"https\".\n\n    .PARAMETER Credential\n        A PSCredential object that contains the username and password for authentication. This parameter is mandatory.\n\n    .NOTES\n        For more information on Splunk authentication, visit: https://docs.splunk.com/Documentation/Splunk/latest/Security/Aboutauthentication\n\n    .EXAMPLE\n        PS> $cred = Get-Credential\n        PS> Get-SplunkAuthToken -ComputerName \"splunkserver\" -Credential $cred\n        @{\n            ComputerName = \"splunkserver\"\n            UserName     = \"admin\"\n            AuthToken    = \"your-session-key\"\n        }\n\n        Retrieves an authentication token from the Splunk server 'splunkserver' using the provided credentials. The session key is returned in the \n        AuthToken field.\n    #>\n\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory)]\n        [String]$ComputerName,\n        \n        [Parameter()]\n        [int]$Port = 8089,\n        \n        [Parameter()]\n        [String]$Protocol = \"https\",\n        \n        [Parameter(Mandatory)]\n        [pscredential]$Credential\n    )\n\n    $uri = \"${Protocol}://${ComputerName}:${Port}/services/auth/login\"\n    $body = @{\n        username = $Credential.UserName\n        password = $Credential.GetNetworkCredential().Password\n    }\n\n    $params = @{\n        Uri             = $uri\n        Method          = 'Post'\n        Body            = $body\n        ErrorAction     = 'Stop'\n        UseBasicParsing = $true\n    }\n    if ($Protocol -eq 'https') {\n        $params.SkipCertificateCheck = $true\n    }\n        \n    $response = Invoke-RestMethod @params\n        \n    Write-Verbose \"Response Content: $($response | Out-String)\"\n        \n    # Parse the XML response\n    $sessionKey = $response.response.sessionKey\n\n    if (-not $sessionKey) {\n        throw \"Failed to retrieve session key from response\"\n    }\n\n    [PSCustomObject]@{\n        ComputerName = $ComputerName\n        UserName     = $Credential.UserName\n        AuthToken    = $sessionKey\n    }\n}\n\nfunction Invoke-SplunkAPIRequest {\n    <#\n    .SYNOPSIS\n        Sends a request to a specified Splunk API endpoint.\n\n    .DESCRIPTION\n        The Invoke-SplunkAPIRequest function sends an HTTP request to a specified Splunk API endpoint using the connection details and \n        authentication information provided in the Connection object. The function supports various HTTP methods and can include a body in \n        the request.\n\n    .PARAMETER Connection\n        A PSCustomObject containing the connection details, including ComputerName, Port, Protocol, AuthToken, and HECToken. This parameter \n        is mandatory.\n\n    .PARAMETER Endpoint\n        The specific API endpoint to which the request will be sent. This parameter is mandatory.\n\n    .PARAMETER Method\n        The HTTP method to use for the request, such as GET, POST, PUT, or DELETE. The default value is GET.\n\n    .PARAMETER Body\n        A hashtable representing the body of the request. This will be converted to JSON format and included in the request if provided.\n\n    .NOTES\n        For more information on Splunk's REST API, visit: https://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTprolog\n\n    .EXAMPLE\n        PS> $connection = Connect-Splunk -ComputerName \"splunkserver\" -Credential (Get-Credential)\n        PS> Invoke-SplunkAPIRequest -Connection $connection -Endpoint \"services/search/jobs\" -Method Post -Body @{ search = \"search index=_internal | head 10\" }\n        {\n            \"sid\": \"random-search-id\"\n        }\n\n        Sends a POST request to the 'services/search/jobs' endpoint on the Splunk server 'splunkserver' to create a new search job, using the provided \n        connection details and search query in the request body. The search ID (sid) is returned.\n\n    .EXAMPLE\n        PS> $connection = Connect-Splunk -ComputerName \"splunkserver\" -HECToken (ConvertTo-SecureString \"your-hec-token\" -AsPlainText -Force)\n        PS> Invoke-SplunkAPIRequest -Connection $connection -Endpoint \"services/collector/event\" -Method Post -Body @{ event = \"Hello Splunk!\" }\n        {\n            \"text\": \"Success\",\n            \"code\": 0\n        }\n\n        Sends a POST request to the 'services/collector/event' endpoint on the Splunk server 'splunkserver' to send a custom event, using the provided \n        connection details and event data in the request body. The response indicates success.\n    #>\n\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory)]\n        [PSCustomObject]$Connection,\n        \n        [Parameter(Mandatory)]\n        [String]$Endpoint,\n        \n        [Parameter()]\n        [Microsoft.PowerShell.Commands.WebRequestMethod]$Method = [Microsoft.PowerShell.Commands.WebRequestMethod]::Get,\n        \n        [Parameter()]\n        [Hashtable]$Body\n    )\n\n    $uri = \"$($Connection.Protocol)://$($Connection.ComputerName):$($Connection.Port)/$Endpoint\"\n\n    $authString = 'Splunk '\n    if ($Connection.HECToken) {\n        $authString += (decryptSecureString $Connection.HECToken)\n    } else {\n        $authString += (decryptSecureString $Connection.AuthToken)\n    }\n\n    $headers = @{\n        \"Authorization\" = $authString\n        \"Content-Type\"  = \"application/json\"\n    }\n\n    $params = @{\n        Uri                  = $uri\n        Method               = $Method\n        Headers              = $headers\n        SkipCertificateCheck = $true\n    }\n\n    if ($Body) {\n        $params.Body = $Body | ConvertTo-Json\n    }\n\n    Invoke-RestMethod @params\n}\n\nfunction Wait-SplunkAcknowledgement {\n    <#\n.SYNOPSIS\n    Waits for a Splunk event to be acknowledged.\n\n.DESCRIPTION\n    The Wait-SplunkAcknowledgement function waits for a specified Splunk event to be acknowledged. It repeatedly checks the acknowledgement \n    status at defined intervals until the event is acknowledged or a timeout is reached.\n\n.PARAMETER Connection\n    A PSCustomObject containing the connection details, including ComputerName, Port, Protocol, AuthToken, and HECToken. This parameter is \n    mandatory.\n\n.PARAMETER AckId\n    The acknowledgement ID of the event to wait for. This parameter is mandatory.\n\n.PARAMETER Channel\n    The channel associated with the event acknowledgement. This parameter is mandatory.\n\n.PARAMETER TimeoutSeconds\n    The maximum number of seconds to wait for the event to be acknowledged. The default value is 60 seconds.\n\n.PARAMETER RetryIntervalSeconds\n    The number of seconds to wait between retries when checking for acknowledgement. The default value is 5 seconds.\n\n.NOTES\n    For more information on Splunk acknowledgements, visit: https://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTendpoints\n\n.EXAMPLE\n    PS> $connection = Connect-Splunk -ComputerName \"splunkserver\" -Credential (Get-Credential)\n    PS> Wait-SplunkAcknowledgement -Connection $connection -AckId \"12345\" -Channel \"main\"\n    True\n\n    Waits for the event with AckId '12345' to be acknowledged on the 'main' channel using the provided connection details. If the event is \n    acknowledged within the timeout period, it returns True.\n\n.EXAMPLE\n    PS> $connection = Connect-Splunk -ComputerName \"splunkserver\" -HECToken (ConvertTo-SecureString \"your-hec-token\" -AsPlainText -Force)\n    PS> Wait-SplunkAcknowledgement -Connection $connection -AckId \"67890\" -Channel \"hec\" -TimeoutSeconds 120 -RetryIntervalSeconds 10\n    False\n\n    Waits for the event with AckId '67890' to be acknowledged on the 'hec' channel using the provided connection details. If the event is not \n    acknowledged within 120 seconds, it returns False.\n#>\n\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory)]\n        [PSCustomObject]$Connection,\n\n        [Parameter(Mandatory)]\n        [string]$AckId,\n\n        [Parameter(Mandatory)]\n        [string]$Channel,\n\n        [Parameter()]\n        [int]$TimeoutSeconds = 60,\n\n        [Parameter()]\n        [int]$RetryIntervalSeconds = 5\n    )\n\n    $startTime = Get-Date\n    $acknowledged = $false\n\n    Write-Verbose \"Waiting for acknowledgement of event with AckId: $AckId\"\n\n    while (-not $acknowledged -and ((Get-Date) - $startTime).TotalSeconds -lt $TimeoutSeconds) {\n        $getSplunkAckParams = @{\n            Connection = $Connection\n            AckId      = $AckId\n            Channel    = $Channel\n        }\n\n        try {\n            $acknowledged = Get-SplunkAcknowledgement @getSplunkAckParams\n            if ($acknowledged) {\n                Write-Verbose \"Event with AckId $AckId has been acknowledged.\"\n                $true\n            }\n        } catch {\n            Write-Warning \"Error checking acknowledgement: $_\"\n        }\n\n        Write-Verbose \"Event not yet acknowledged. Waiting $RetryIntervalSeconds seconds before retrying...\"\n        Start-Sleep -Seconds $RetryIntervalSeconds\n    }\n\n    if (-not $acknowledged) {\n        Write-Warning \"Timeout reached. Event with AckId $AckId was not acknowledged within $TimeoutSeconds seconds.\"\n        $false\n    }\n}\n\nfunction Get-SplunkAcknowledgement {\n    <#\n    .SYNOPSIS\n        Checks if a Splunk event with a specified acknowledgement ID has been indexed.\n\n    .DESCRIPTION\n        The Get-SplunkAcknowledgement function checks whether a Splunk event with the specified acknowledgement ID has been indexed on a \n        given channel. It uses the connection details provided in the Connection object to send a request to the Splunk API.\n\n    .PARAMETER Connection\n        A PSCustomObject containing the connection details, including ComputerName, Port, Protocol, AuthToken, and HECToken. This parameter \n        is mandatory.\n\n    .PARAMETER AckId\n        The acknowledgement ID of the event to check. This parameter is mandatory.\n\n    .PARAMETER Channel\n        The channel associated with the event acknowledgement. This parameter is mandatory.\n\n    .NOTES\n        For more information on Splunk acknowledgements, visit: https://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTendpoints\n\n    .EXAMPLE\n        PS> $connection = Connect-Splunk -ComputerName \"splunkserver\" -Credential (Get-Credential)\n        PS> Get-SplunkAcknowledgement -Connection $connection -AckId \"12345\" -Channel \"main\"\n        True\n\n        Checks if the event with AckId '12345' has been indexed on the 'main' channel using the provided connection details. If the event has \n        been indexed, it returns True.\n\n    .EXAMPLE\n        PS> $connection = Connect-Splunk -ComputerName \"splunkserver\" -HECToken (ConvertTo-SecureString \"your-hec-token\" -AsPlainText -Force)\n        PS> Get-SplunkAcknowledgement -Connection $connection -AckId \"67890\" -Channel \"hec\"\n        False\n\n        Checks if the event with AckId '67890' has been indexed on the 'hec' channel using the provided connection details. If the event has \n        not been indexed, it returns False.\n    #>\n\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory)]\n        [PSCustomObject]$Connection,\n        \n        [Parameter(Mandatory)]\n        [String]$AckId,\n\n        [Parameter(Mandatory)]\n        [String]$Channel\n    )\n\n    $invokeParams = @{\n        Connection = $Connection\n        Endpoint   = \"services/collector/ack?channel=$Channel\"\n        Method     = \"GET\"\n        Body       = @{acks = @($AckId) }\n    }\n    $response = Invoke-SplunkAPIRequest @invokeParams\n    \n    if ($response.acks.$AckId -eq \"true\") {\n        Write-Verbose \"Event with ackId $AckId has been successfully indexed.\"\n        $true\n    } else {\n        Write-Verbose \"Event with ackId $AckId has not been indexed yet.\"\n        $false\n    }\n}\n\nfunction Send-SplunkEvent {\n    <#\n    .SYNOPSIS\n    Sends an event to Splunk using the HTTP Event Collector (HEC).\n\n    .DESCRIPTION\n    This function sends an event to Splunk using the HTTP Event Collector (HEC). It requires a connection object obtained from Connect-Splunk and a hashtable containing the event data.\n\n    .PARAMETER Connection\n    A PSCustomObject containing the Splunk connection details, typically obtained from the Connect-Splunk function.\n\n    .PARAMETER EventData\n    A hashtable containing the event data to be sent to Splunk. This should include at minimum a 'message' key, and can optionally include 'timestamp' and 'source' keys.\n\n    .EXAMPLE\n    $hecConnection = Connect-Splunk -ComputerName 'splunk.example.com' -HECToken 'xxxxxxxxx'\n    $eventData = @{\n        message   = 'User login successful'\n        timestamp = [DateTimeOffset]::UtcNow.ToUnixTimeSeconds()\n        source    = 'DevolutionsPAM'\n    }\n    Send-SplunkEvent -Connection $hecConnection -EventData $eventData \n\n    This example connects to Splunk using HEC, creates an event with a message, timestamp, and source, and sends it to Splunk.\n\n    .EXAMPLE\n    $hecToken = 'ecc94209-e037-43d5-aac9-396a289eee1e'\n    $hecConnection = Connect-Splunk -ComputerName 'localhost' -HECToken ($hecToken | ConvertTo-SecureString -AsPlainText -Force)\n    $eventData = @{\n        event = \"hello world\"\n    }\n    Send-SplunkEvent -Connection $hecConnection -EventData $eventData\n\n    This example demonstrates sending a simple \"hello world\" event to a local Splunk instance using a specific HEC token.\n\n    .NOTES\n    - Ensure that the HEC token has the necessary permissions to send events.\n    - The timestamp should be in Unix epoch time (seconds since 1970-01-01 00:00:00 UTC).\n    - If 'timestamp' is not provided in the EventData, Splunk will use the current time when it receives the event.\n    - The 'source' field is optional but can be useful for filtering and searching events in Splunk.\n    - To create an HTTP event collector, refer to: https://docs.splunk.com/Documentation/Splunk/9.2.2/Data/UsetheHTTPEventCollector\n    - The default HEC port is 8088, while the management port is typically 8089.\n    - Always use HTTPS and skip certificate checks in test environments only.\n    #>\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory)]\n        [PSCustomObject]$Connection,\n\n        [Parameter(Mandatory)]\n        [hashtable]$EventData\n    )\n\n    # Prepare the event data\n    $eventData = @{                                                      \n        event = $EventData\n    }\n\n    $invokeParams = @{\n        Connection = $Connection\n        Endpoint   = \"services/collector/event\"\n        Method     = \"POST\"\n        Body       = $eventData\n    }\n\n    Invoke-SplunkAPIRequest @invokeParams\n}\n#endregion\n\n## This is useful to see what parameters DVLS passed to the script\nWrite-Output -InputObject \"Running script with parameters: $($PSBoundParameters | Out-String) as [$(whoami)]...\"\n\ntry {\n\n    if (-not $Source) {\n        $Source = \"DevolutionsPAM\"\n    }\n\n    if (-not $Protocol) {\n        $Protocol = \"https\"\n    }\n\n    if (-not $Port -or $Port -eq 0) {\n        $Port = 8088\n    }\n\n    # Connect to Splunk\n    $splunkConnection = Connect-Splunk -ComputerName $SplunkHost -HECToken $HECToken -Port $Port -Protocol $Protocol\n\n    # Prepare the event data\n    $eventData = @{\n        message   = \"Password changed for user: $UserName\"\n        timestamp = [DateTimeOffset]::UtcNow.ToUnixTimeSeconds()\n        source    = $Source\n        user      = $UserName\n        action    = \"password_change\"\n    }\n\n    # Send the event to Splunk\n    $result = Send-SplunkEvent -Connection $splunkConnection -EventData $eventData\n\n    if ($result.text -eq \"Success\") {\n        Write-Output \"Successfully sent password change event to Splunk for user: $UserName\"\n        $true\n    } else {\n        throw \"Failed to send password change event to Splunk. Error: $($result.text)\"\n    }\n} catch {\n    Write-Error \"An error occurred while sending the Splunk event: $_\"\n    $false\n}",
    "configurationProperties": [
      {
        "id": "e8b007f9-d9cd-40c3-9f20-7b1506193009",
        "isMandatory": true,
        "name": "SplunkHost"
      },
      {
        "id": "80f1e25c-3b99-4f6e-8e6e-aabf19c4d8ec",
        "isMandatory": true,
        "name": "HECToken",
        "type": 5
      },
      {
        "id": "741f8744-96b1-4718-a490-a0f2bd9083dd",
        "isMandatory": true,
        "name": "Source"
      },
      {
        "id": "c0942270-7801-40aa-aa18-29a60194b62e",
        "isMandatory": true,
        "name": "Protocol"
      }
    ],
    "description": "Sends an event to a Splunk Enterprise server.",
    "executionProperties": [],
    "id": "c7fa3cb0-be80-401d-971d-7e2f08190340",
    "imageName": "SampleAccessPointBForest",
    "name": "Splunk Enterprise Event",
    "parameters": [
      {
        "name": "SplunkHost",
        "propertyId": "e8b007f9-d9cd-40c3-9f20-7b1506193009"
      },
      {
        "name": "HECToken",
        "propertyId": "80f1e25c-3b99-4f6e-8e6e-aabf19c4d8ec"
      },
      {
        "name": "Source",
        "propertyId": "741f8744-96b1-4718-a490-a0f2bd9083dd"
      },
      {
        "name": "Protocol",
        "propertyId": "c0942270-7801-40aa-aa18-29a60194b62e"
      },
      {
        "name": "UserName",
        "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73",
        "source": 1
      },
      {
        "name": "NewPassword",
        "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
        "source": 1
      }
    ],
    "version": 2
  }
}