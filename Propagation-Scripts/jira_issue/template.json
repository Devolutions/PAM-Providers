{
  "version": 1,
  "template": {
    "command": "[CmdletBinding()]\nParam (\n    [Parameter(Mandatory)]\n    [string]$SiteUrl,\n\n    [Parameter(Mandatory)]\n    [string]$JiraUsername,\n\n    [Parameter(Mandatory)]\n    [SecureString]$ApiToken,\n\n    [Parameter(Mandatory)]\n    [string]$ProjectKey,\n\n    [Parameter(Mandatory)]\n    [string]$IssueType,\n\n    [Parameter(Mandatory)]\n    [string]$UserName,\n\n    [Parameter(Mandatory)]\n    [string]$IssueSummary,\n\n    [Parameter()]\n    [string]$IssueKey,\n\n    [Parameter()]\n    [string]$Status,\n\n    ## This is only a placeholder for AnyID and is not used\n    [Parameter()]\n    [securestring]$NewPassword\n)\n\n$ErrorActionPreference = 'Stop'\n\n# Function to invoke JIRA API\nfunction Invoke-JiraApi {\n    [CmdletBinding()]\n    param (\n        [string]$Method,\n        [string]$Endpoint,\n        [hashtable]$Body\n    )\n\n    $apiUrl = \"$SiteUrl/rest/api/2$Endpoint\"\n    $plainTextApiToken = (New-Object PSCredential \"user\", $ApiToken).GetNetworkCredential().Password\n    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $JiraUsername, $plainTextApiToken)))\n    \n    $headers = @{\n        Authorization  = \"Basic $base64AuthInfo\"\n        \"Content-Type\" = \"application/json\"\n    }\n\n    try {\n        $params = @{\n            Uri = $apiUrl\n            Method = $Method\n            Headers = $headers\n            StatusCodeVariable = 'StatusCode'\n        }\n        if ($Body) { $params['Body'] = ($Body | ConvertTo-Json -Depth 10) }\n        \n        $response = Invoke-RestMethod @params\n\n        [PSCustomObject]@{\n            Response   = $response\n            StatusCode = $StatusCode\n        }\n    } catch {\n        throw \"Error calling Jira API: $_\"\n    }\n}\n\n# Function to get project details\nfunction Get-JiraProject {\n    param ([string]$ProjectKey)\n    \n    $projectEndpoint = \"/project/$ProjectKey\"\n    $projectResult = Invoke-JiraApi -Method 'GET' -Endpoint $projectEndpoint\n    \n    if (-not $projectResult.Response) {\n        throw \"Project with key '$ProjectKey' does not exist.\"\n    }\n    \n    $projectResult.Response\n}\n\n# Function to get available issue types for a project\nfunction Get-JiraProjectIssueTypes {\n    param ([string]$ProjectKey)\n    \n    $issueTypesEndpoint = \"/project/$ProjectKey/statuses\"\n    $issueTypesResult = Invoke-JiraApi -Method 'GET' -Endpoint $issueTypesEndpoint\n    \n    $issueTypesResult.Response\n}\n\n# Function to create or update JIRA issue\nfunction Set-JiraIssue {\n    param (\n        [hashtable]$IssueData,\n        [string]$IssueKey\n    )\n\n    if ($IssueKey) {\n        $updateEndpoint = \"/issue/$IssueKey\"\n        $updateResult = Invoke-JiraApi -Method 'PUT' -Endpoint $updateEndpoint -Body $IssueData\n        if ($updateResult.StatusCode -ne 204) {\n            throw \"Failed to update JIRA ticket.\"\n        }\n    } else {\n        $newIssue = Invoke-JiraApi -Method 'POST' -Endpoint '/issue' -Body $IssueData\n        if (-not $newIssue.Response) {\n            throw \"Failed to create JIRA ticket.\"\n        }\n        $IssueKey = $newIssue.Response.key\n    }\n    \n    $IssueKey\n}\n\n# Function to update issue status\nfunction Set-JiraIssueStatus {\n    param (\n        [string]$IssueKey,\n        [string]$Status\n    )\n\n    $transitionsEndpoint = \"/issue/$IssueKey/transitions\"\n    $availableTransitions = Invoke-JiraApi -Method 'GET' -Endpoint $transitionsEndpoint\n\n    $transitionId = $availableTransitions.Response.transitions | \n        Where-Object { $_.to.name -eq $Status } | \n        Select-Object -ExpandProperty id\n\n    if (-not $transitionId) {\n        throw \"Unable to find a valid transition to status '$Status'\"\n    }\n\n    $transitionBody = @{\n        transition = @{ id = $transitionId }\n    }\n\n    $statusUpdateResult = Invoke-JiraApi -Method 'POST' -Endpoint $transitionsEndpoint -Body $transitionBody\n    if ($statusUpdateResult.StatusCode -ne 204) {\n        throw \"Failed to update issue status.\"\n    }\n}\n\ntry {\n    $ProjectKey = $ProjectKey.ToUpper()\n\n    # Validate IssueType\n    $validIssueTypes = @('Task', 'Bug', 'Story', 'Epic', 'Subtask', 'Incident', 'Service Request', 'Change', 'Problem')\n    if ($IssueType -and $IssueType -notin $validIssueTypes) {\n        throw \"Invalid IssueType. Allowed values are: $($validIssueTypes -join ', ')\"\n    }\n\n    # Validate Status if provided\n    $validStatuses = @('To Do', 'In Progress', 'Done')\n    if ($Status) {\n        if ($Status -notin $validStatuses) {\n            throw \"Invalid Status. Allowed values are: $($validStatuses -join ', ')\"\n        }\n        Set-JiraIssueStatus -IssueKey $updatedIssueKey -Status $Status\n    }\n\n    # Validate project and issue type\n    $project = Get-JiraProject -ProjectKey $ProjectKey\n    $availableIssueTypes = Get-JiraProjectIssueTypes -ProjectKey $ProjectKey\n    $matchingIssueType = $availableIssueTypes | Where-Object { $_.name -eq $IssueType } | Select-Object -First 1\n\n    if (-not $matchingIssueType) {\n        throw \"Issue type '$IssueType' is not available for this project.\"\n    }\n\n    # Prepare issue data\n    $issueData = @{\n        fields = @{\n            project   = @{ key = $ProjectKey }\n            summary   = $IssueSummary\n            issuetype = @{ id = $matchingIssueType.id }\n        }\n    }\n\n    if ($UserName) {\n        $issueData.fields.description = \"The user [$UserName]'s password has changed.\"\n    }\n\n    # Create or update issue\n    $updatedIssueKey = Set-JiraIssue -IssueData $issueData -IssueKey $IssueKey    \n\n    $true\n} catch {\n    $false\n    Write-Error \"Error creating or updating JIRA ticket: $_\"\n}\n",
    "configurationProperties": [
      {
        "id": "e2ab8646-083c-4495-8ca0-74bc36258fc8",
        "isMandatory": true,
        "name": "SiteUrl"
      },
      {
        "id": "a5bbaa79-2dd0-4a40-ac66-0b1f7e4d5a10",
        "isMandatory": true,
        "name": "JiraUserName"
      },
      {
        "id": "46f2c278-78d0-40c5-b193-63e336becf27",
        "isMandatory": true,
        "name": "ApiToken",
        "type": 5
      },
      {
        "id": "ce78ee08-7c3d-4c7c-88f7-3ea7198681b1",
        "isMandatory": true,
        "name": "ProjectKey"
      }
    ],
    "description": "Creates or updates a Jira issue.",
    "executionProperties": [
      {
        "id": "6bca4b38-446e-4e8e-9962-62b4e6778d78",
        "isMandatory": true,
        "name": "IssueType"
      },
      {
        "id": "d8a1112e-4c52-44e9-a9e9-cff3e4219fc0",
        "name": "IssueKey"
      },
      {
        "id": "ffeaa1f7-ace5-4d2b-8b60-9a6674d7e2a3",
        "name": "Status"
      },
      {
        "id": "64a74925-c12b-4249-8fcd-a0498cd3ef0b",
        "isMandatory": true,
        "name": "UserName",
        "type": 8
      },
      {
        "id": "e58938fe-b849-4167-9c62-7893e04bb5be",
        "isMandatory": true,
        "name": "IssueSummary"
      }
    ],
    "id": "8faf7d56-4cc2-42ba-ae75-bdc8ee543db1",
    "imageName": "SampleFlag2Blue",
    "name": "Jira Issue"
  }
}