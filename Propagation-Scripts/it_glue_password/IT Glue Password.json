{
  "version": 2,
  "template": {
    "command": "[CmdletBinding()]\nParam (\n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [securestring]$EndpointApiKey,\n\n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [string]$PasswordName,\n\n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [securestring]$NewPassword,\n\n    [Parameter()]\n    [string]$EndpointUri\n)\n\n#region Functions\nfunction decryptPassword ([securestring]$Password) {\n    # Decrypts a secure string password\n    try {\n        $ptr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($Password)\n        [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ptr)\n    } finally {\n        ## Clear the decrypted password from memory\n        [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ptr)\n    }\n}\n\nfunction newQueryString([Hashtable]$QueryParams) {\n    # Generates a URL-encoded query string from a hashtable of parameters\n    # Load the System.Web assembly to access HttpUtility class\n    Add-Type -AssemblyName System.Web\n\n    # Initialize an empty query string collection\n    $query = [System.Web.HttpUtility]::ParseQueryString([String]::Empty)\n\n    # Iterate over each key-value pair in the provided Hashtable of query parameters\n    $QueryParams.GetEnumerator() | ForEach-Object {\n        # Add each key-value pair to the query string collection\n        $query.Add($_.Key, [System.Net.WebUtility]::UrlEncode($_.Value))\n    }\n\n    # Return the completed query string\n    $query.ToString()\n}\n\nfunction invokeITGlueApiCall {\n    # Invokes an API call to IT Glue\n    param(\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [string]$ResourceURI,\n    \n        [Parameter()]\n        [ValidateNotNullOrEmpty()]\n        [ValidateSet('GET', 'POST', 'PATCH', 'DELETE')]\n        [string]$Method = 'GET',\n    \n        [Parameter()]\n        [ValidateNotNullOrEmpty()]\n        [hashtable]$ApiParameter,\n    \n        [Parameter()]\n        [ValidateNotNullOrEmpty()]\n        [hashtable]$RequestBody\n    )\n\n    # Construct the full API URI by appending the resource URI to the base URI\n    $apiUri = \"$script:EndpointUri/$ResourceURI\"\n\n    # Setup the headers for the API call, including the API key\n    $headers = @{\n        'x-api-key' = (decryptPassword $script:EndpointApiKey) # Decrypt the API key for use in the header\n    }\n\n    # Initialize parameters for Invoke-RestMethod\n    $irmParams = @{\n        Uri                = $apiUri\n        Method             = $Method # HTTP method (GET, POST, etc.)\n        Headers            = $headers # Headers including the API key\n        StatusCodeVariable = 'respStatus' # Capture the status code of the API response\n        SkipHttpErrorCheck = $true\n    }\n\n    # If the method is not GET, specify the content type explicitly\n    if ($Method -ne 'GET') {\n        $irmParams.ContentType = 'application/vnd.api+json'\n    }\n    \n    # If a request body is provided, convert it to JSON and add it to the parameters\n    if ($PSBoundParameters.ContainsKey('RequestBody')) {\n        $irmParams.Body = ($RequestBody | ConvertTo-Json)\n    }\n    \n    # Add query string to the URI if ApiParameter is provided and AllResults is not present\n    if ($PSBoundParameters.ContainsKey('ApiParameter')) {\n        $queryString = newQueryString -Uri $apiUri -QueryParams $ApiParameter\n        $irmParams.Uri = '{0}?{1}' -f $apiUri, $queryString\n    }\n\n    # Make the API call\n    $response = Invoke-RestMethod @irmParams\n    # If the response status code is not 200, throw the response as an error\n    if ($respStatus -ne 200) {\n        if ($response.errors) {\n            throw $response.errors.detail\n        } else {\n            throw $response\n        }\n    }\n    $response\n}\n\nfunction getITGluePassword($PasswordName) {\n    # Retrieves a password from IT Glue by name\n    $resourceUri = \"passwords\"\n    $result = invokeITGlueApiCall -ResourceURI $resourceUri -ApiParameter @{ 'filter[name]' = $PasswordName }\n    $result.data\n}\n\nfunction setITGluePassword($PasswordId, $Password) {\n    # Updates a password in IT Glue by ID\n    $resourceUri = \"passwords/$PasswordId\"\n\n    $data = @{\n        'data' = @{\n            'type'       = 'passwords'\n            'attributes' = @{\n                'password' = (decryptPassword $Password)\n            }\n        }\n    }\n    $null = invokeITGlueApiCall -Method PATCH -ResourceURI $resourceUri -RequestBody $data -ApiParameter @{'show_password' = 'true' }\n}\n#endregion\n\n## This is useful to see what parameters DVLS passed to the script\nWrite-Output -InputObject \"Running script with parameters: $($PSBoundParameters | Out-String) as [$(whoami)]...\"\n\n# Set the preference to stop the script on any errors encountered\n$ErrorActionPreference = 'Stop'\n\n# If EndpointUri is not provided, use the default IT Glue API endpoint\nif (!$EndPointUri) {\n    $EndpointUri = 'https://api.itglue.com'\n}\n\n# Store the API key and endpoint URI in script-scoped variables for use in functions\n$script:EndpointApiKey = $EndpointApiKey\n$script:EndpointUri = $EndpointUri\n\ntry {\n    # Retrieve the password from IT Glue by name\n    $pw = getITGluePassword -PasswordName $PasswordName\n    Write-Output -InputObject \"Resetting password for password [$($PasswordName)] (ID: [$($pw.id)])...\"\n    \n    # Update the password in IT Glue\n    setITGluePassword -PasswordId $pw.id -Password $NewPassword\n    Write-Output -InputObject 'Successfully reset password.'\n    $true\n} catch {\n    # If the password is not found, throw a specific error message\n    if ($_.Exception.Message -eq 'Record not found') {\n        throw \"The requested password [$($PasswordName)] was not found.\"\n    }\n    # Otherwise, re-throw the caught exception\n    throw $_\n}",
    "configurationProperties": [
      {
        "id": "eee3ff8e-00b6-41d6-9897-ffc3d9d920f5",
        "isMandatory": true,
        "name": "EndpointUri"
      },
      {
        "id": "00c5d8ab-76ad-4268-934b-691727542b53",
        "isMandatory": true,
        "name": "EndpointApiKey",
        "type": 5
      }
    ],
    "description": "Updates a password value in IT Glue given a password name.",
    "executionProperties": [],
    "id": "c309804b-e27e-443d-aef8-9fbc03a286e0",
    "imageName": "",
    "name": "IT Glue Password",
    "parameters": [
      {
        "name": "EndpointApiKey",
        "propertyId": "00c5d8ab-76ad-4268-934b-691727542b53"
      },
      {
        "name": "EndpointUri",
        "propertyId": "eee3ff8e-00b6-41d6-9897-ffc3d9d920f5"
      },
      {
        "name": "PasswordName",
        "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73",
        "source": 1
      },
      {
        "name": "NewPassword",
        "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
        "source": 1
      }
    ],
    "version": 2
  }
}