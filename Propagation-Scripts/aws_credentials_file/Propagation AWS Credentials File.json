{
  "version": 2,
  "template": {
    "command": "[CmdletBinding()]\nparam(\n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [string]$Endpoint,\n    \n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [string]$EndpointUserName,\n\n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [securestring]$EndpointPassword,\n\n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [string]$OldIAMAccessKeyId,\n\n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [string]$NewIAMAccessKeyId,\n\n    [Parameter(Mandatory)]\n    [ValidateNotNullOrEmpty()]\n    [securestring]$NewPassword,\n\n    [Parameter()]\n    [string]$ProfileName,\n\n    [Parameter()]\n    [string]$CredentialsFilePath\n)\n\n# Output the script parameters and the current user running the script\nWrite-Output -InputObject “Running script with parameters: $($PSBoundParameters | Out-String) as [$(whoami)]”\n\n#region Functions\n# Function to create a new PSCredential object\nfunction newCredential([string]$UserName, [securestring]$Password) {\n    New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $UserName, $Password\n}\n#endregion\n\n# Create a new PSCredential object using the provided EndpointUserName and EndpointPassword\n$credential = newCredential $EndpointUserName $EndpointPassword\n\n# Define a script block to be executed remotely on the Windows server\n$scriptBlock = {\n\n    $ErrorActionPreference = 'Stop'\n\n    #region functions\n    function decryptPassword {\n        param(\n            [securestring]$Password\n        )\n        try {\n            $ptr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($Password)\n            [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ptr)\n        } finally {\n            ## Clear the decrypted password from memory\n            [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ptr)\n        }\n    }\n\n    function Find-AWSCredentialFileProfile {\n        [CmdletBinding()]\n        param (\n            [Parameter()]\n            [ValidateScript({ Test-Path -Path $_ -PathType Leaf })]\n            [string[]]$CredentialsFilePath,\n\n            [Parameter()]\n            [ValidateNotNullOrEmpty()]\n            [string[]]$ProfileName\n        )\n\n        if ($PSBoundParameters.ContainsKey('CredentialsFilePath')) {\n            $credentialFiles = Get-ChildItem -Path $CredentialsFilePath\n        } else {\n            ## Look for credentials file across all user profiles\n            $profilesDirectory = (Get-ItemProperty -Path “HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList”).ProfilesDirectory\n            $profilesDirectory = [Environment]::ExpandEnvironmentVariables($profilesDirectory)\n\n            $credentialFiles = Get-ChildItem -Path $profilesDirectory -Recurse -Filter “credentials” -File -ErrorAction SilentlyContinue |\n            Where-Object { $_.Directory.Name -eq '.aws' }\n        }\n\n        foreach ($credFile in $credentialFiles) {\n    \n            $content = Get-Content -Path $credFile.FullName -Raw\n            $profiles = @() # Initialize an array to hold all profiles\n            $currentProfile = $null\n\n            foreach ($line in $content -split “\\r?\\n”) {\n                if ($line -match '^\\[([^]]+)\\]') {\n                    # Before resetting $currentProfile, add it to $profiles if it's not null\n                    if ($null -ne $currentProfile) {\n                        $profiles += [pscustomobject]$currentProfile\n                    }\n                    $currentProfile = [ordered]@{\n                        Name                = $matches[1] -replace '^profile\\s+', ''\n                        CredentialsFilePath = $credFile.FullName\n                    }\n                } elseif ($line -match '^(aws_access_key_id|aws_secret_access_key|aws_session_token)\\s*=\\s*(.*)') {\n                    if ($null -ne $currentProfile) {\n                        $currentProfile[$matches[1]] = $matches[2]\n                    }\n                }\n            }\n            # Add the last profile after exiting the loop\n            if ($null -ne $currentProfile) {\n                $profiles += [pscustomobject]$currentProfile\n            }\n\n            $profiles.where({ !$ProfileName -or $_.name -in $ProfileName })\n        }\n    }\n    \n    function Update-AWSCredentialsFileProfile {\n        [CmdletBinding()]\n        param (\n            [Parameter(Mandatory, ValueFromPipeline)]\n            [PSCustomObject]$AwsProfile,\n            [Parameter(Mandatory)]\n            [string]$NewAccessKeyID,\n            [Parameter(Mandatory)]\n            [string]$NewSecretAccessKey\n        )\n    \n        Process {\n            $content = Get-Content -Path $AwsProfile.CredentialsFilePath\n            $updatedContent = @()\n    \n            $insideProfile = $false\n            foreach ($line in $content) {\n                if ($line -match '^\\[' + [regex]::Escape($AwsProfile.name) + '\\]') {\n                    $insideProfile = $true\n                    $updatedContent += $line\n                } elseif ($line -match '^\\[') {\n                    $insideProfile = $false\n                    $updatedContent += $line\n                } elseif ($insideProfile) {\n                    if ($line -match '^aws_access_key_id\\s*=') {\n                        $updatedContent += “aws_access_key_id = $NewAccessKeyID”\n                    } elseif ($line -match '^aws_secret_access_key\\s*=') {\n                        $updatedContent += “aws_secret_access_key = $NewSecretAccessKey”\n                    } else {\n                        $updatedContent += $line\n                    }\n                } else {\n                    $updatedContent += $line\n                }\n            }\n            $updatedContent | Set-Content -Path $AwsProfile.CredentialsFilePath\n            Write-Verbose “Updated profile $($AwsProfile.name) in the credentials file.”\n        }\n    }\n    #endregion\n\n    $findCredFileParams = @{}\n    if ($args[3]) {\n        $findCredFileParams.CredentialsFilePath = $args[3]\n    }\n    if ($args[4]) {\n        $findCredFileParams.ProfileName = $args[4]\n    }\n\n    $foundCredentialFileProfiles = Find-AWSCredentialFileProfile @findCredFileParams\n \n    ## Must assign this arg it's own var because it's being used inside of the where filter where $args is a thing\n    $oldIAMAccessKeyId = $args[0]\n\n    $matchingCredentialFileProfiles = @($foundCredentialFileProfiles).where({ $_.aws_access_key_id -eq $oldIAMAccessKeyId })\n\n    $matchingCredentialFileProfiles | Update-AWSCredentialsFileProfile -NewAccessKeyID $args[1] -NewSecretAccessKey (decryptPassword($args[2]))\n}\n\nif ($PSBoundParameters.ContainsKey('ProfileName')) {\n    $profileNames = $ProfileName -split ','\n}\nif ($PSBoundParameters.ContainsKey('CredentialsFilePath')) {\n    $credentialsFilePaths = $CredentialsFilePath -split ','\n}\n\ntry {\n    $invParams = @{\n        ComputerName = $Endpoint\n        ScriptBlock  = $scriptBlock\n        Credential   = $credential\n        ArgumentList = $OldIAMAccessKeyId, $NewIAMAccessKeyId, $NewPassword, $credentialsFilePaths, $profileNames\n    }\n    Invoke-Command @invParams\n} catch [System.Management.Automation.Remoting.PSRemotingTransportException] {\n    throw \"Script is unable to connect to the remote computer [$Endpoint].\"\n}",
    "configurationProperties": [
      {
        "id": "178d3809-b9c9-44cd-b746-ec7e64548a0b",
        "isMandatory": true,
        "name": "Endpoint"
      },
      {
        "id": "363388b6-d4c6-4ac0-8e43-bcedf33641fa",
        "isMandatory": true,
        "name": "EndpointUserName"
      },
      {
        "id": "d1a02428-39ee-4cbd-858b-1078646a0b8f",
        "isMandatory": true,
        "name": "EndpointPassword",
        "type": 3
      },
      {
        "id": "814d75fe-28d2-47b0-b5ae-73c23bc6e444",
        "isMandatory": true,
        "name": "NewIAMAccessKeyId"
      },
      {
        "id": "23c02096-4482-4f19-aa8b-f14a12194412",
        "isMandatory": true,
        "name": "ProfileName"
      },
      {
        "id": "922f521f-e20a-4d76-b1da-7219475fb65d",
        "isMandatory": true,
        "name": "CredentialsFilePath"
      }
    ],
    "description": "Searches for existing IAM access key IDs in AWS credentials files and updates both the access key ID and secret access key associated with one or more profiles.",
    "executionProperties": [],
    "id": "869c0d96-e656-4b0f-89aa-e3e54c9d40d3",
    "imageName": "",
    "name": "AWS Credentials File",
    "parameters": [
      {
        "name": "Endpoint",
        "propertyId": "178d3809-b9c9-44cd-b746-ec7e64548a0b"
      },
      {
        "name": "EndpointUserName",
        "propertyId": "363388b6-d4c6-4ac0-8e43-bcedf33641fa"
      },
      {
        "name": "EndpointPassword",
        "propertyId": "d1a02428-39ee-4cbd-858b-1078646a0b8f",
        "type": 3
      },
      {
        "name": "NewIAMAccessKeyId",
        "propertyId": "814d75fe-28d2-47b0-b5ae-73c23bc6e444"
      },
      {
        "name": "ProfileName",
        "propertyId": "23c02096-4482-4f19-aa8b-f14a12194412"
      },
      {
        "name": "CredentialsFilePath",
        "propertyId": "922f521f-e20a-4d76-b1da-7219475fb65d"
      },
      {
        "name": "OldIAMAccessKeyId",
        "propertyId": "c24049c5-9ec4-4f26-832c-86f283067c73",
        "source": 1
      },
      {
        "name": "NewPassword",
        "propertyId": "05799f12-c6d9-4266-94f7-42b50e3d4a6b",
        "source": 1
      }
    ],
    "version": 2
  }
}