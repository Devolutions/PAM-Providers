{
  "version": 1,
  "template": {
    "command": "[CmdletBinding()]\nParam (\n    [Parameter(Mandatory)]\n    [string]$UserName,\n\n    [Parameter(Mandatory)]\n    [string]$Channel,\n\n    [Parameter(Mandatory)]\n    [securestring]$SlackOAuthToken,\n\n    [Parameter(Mandatory)]\n    [string]$WebhookUrl,\n\n    [Parameter()]\n    [string]$Message,\n\n    ## Not used. Only here for AnyId\n    [Parameter()]\n    [securestring]$NewPassword\n)\n\n#region Functions\n\nfunction decryptSecret ([securestring]$Secret) {\n    # Decrypts a secure string\n    try {\n        $ptr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($Secret)\n        [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ptr)\n    } finally {\n        ## Clear the decrypted secret from memory\n        [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ptr)\n    }\n}\n\nfunction invokeSlackApiCall {\n    # Invokes an API call to Slack\n    param(\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [hashtable]$RequestBody,\n    \n        [Parameter()]\n        [ValidateNotNullOrEmpty()]\n        [ValidateSet('POST')]\n        [string]$Method = 'POST'\n    )\n\n    # Setup the headers for the API call, including the API key\n    $headers = @{\n        'Content-type' = 'application/json'\n    }\n\n    # Initialize parameters for Invoke-RestMethod\n    $irmParams = @{\n        Uri                = $WebhookUrl\n        Method             = $Method # HTTP method (GET, POST, etc.)\n        Headers            = $headers # Headers including the API key\n        StatusCodeVariable = 'respStatus' # Capture the status code of the API response\n        SkipHttpErrorCheck = $true\n        Body               = ($RequestBody | ConvertTo-Json)\n    }\n\n    # Make the API call\n    $response = Invoke-RestMethod @irmParams\n    # If the response status code is not 200, throw the response as an error\n    if ($respStatus -ne 200 -or $response -ne 'ok') {\n        if ($response.errors) {\n            throw $response.errors.detail\n        } else {\n            throw $response\n        }\n    }\n}\n#endregion\n\n## This is useful to see what parameters DVLS passed to the script\nWrite-Output -InputObject \"Running script with parameters: $($PSBoundParameters | Out-String) as [$(whoami)]...\"\n\n# Set the preference to stop the script on any errors encountered\n$ErrorActionPreference = 'Stop'\n\nif (-not $Message) {\n    $Message = \"User [$UserName] password has been reset.\"\n} else {\n    $Message = \"User [$UserName] password has been reset : $Message\"\n}\n\n$requestBody = @{\n    'text' = $Message\n    'channel' = $Channel\n    'token' = (decryptSecret $SlackOAuthToken)\n}\n\ninvokeSlackApiCall -RequestBody $requestBody",
    "configurationProperties": [
      {
        "id": "006ab5d8-61b9-4f6b-a5a7-b8c151036078",
        "isMandatory": true,
        "name": "Channel"
      },
      {
        "id": "890780dc-dbf4-4586-aa7d-fc61fa9b95eb",
        "isMandatory": true,
        "name": "SlackOAuthToken",
        "type": 5
      },
      {
        "id": "d8198cf0-518f-499c-94bb-bd6b4827115b",
        "isMandatory": true,
        "name": "WebhookUrl"
      }
    ],
    "description": "Sends a message to a Slack channel",
    "executionProperties": [
      {
        "id": "4d04e114-2caf-4b65-bce6-3c891fcb512f",
        "isMandatory": true,
        "name": "UserName",
        "type": 8
      },
      {
        "id": "3efa2b59-2d8c-44d4-bea6-72a34bff74bc",
        "name": "Message"
      }
    ],
    "id": "fb6ac67f-a520-46fa-af6a-01466e7f3d73",
    "imageName": "SampleLetterSBlack",
    "name": "Slack Message"
  }
}